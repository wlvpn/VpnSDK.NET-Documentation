{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "API Documentation On the left-hand side you will find in-depth information on all the classes, objects and enums provided with VpnSDK. To get started, the SDKBuilder<ISDK> class and ISDK interface are used for most operations in the SDK. SDKBuilder provides the ability to construct an SDK instance and ISDK is how the instance is used."
  },
  "api/VpnSDK.AccountMetadataException.html": {
    "href": "api/VpnSDK.AccountMetadataException.html",
    "title": "Class AccountMetadataException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class AccountMetadataException Exception AccountMetadataException. Fires when the account metadata is incorrect.. Inheritance Object BaseSDKException CoreException AccountMetadataException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class AccountMetadataException : CoreException Constructors AccountMetadataException(String) Initializes a new instance of the AccountMetadataException class. Declaration public AccountMetadataException(string message) Parameters Type Name Description String message The message to pass to the calling code. AccountMetadataException(String, Exception) Initializes a new instance of the AccountMetadataException class. Declaration public AccountMetadataException(string message, Exception innerException) Parameters Type Name Description String message The message to pass to the calling code. Exception innerException Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException CoreException"
  },
  "api/VpnSDK.APIException.html": {
    "href": "api/VpnSDK.APIException.html",
    "title": "Class APIException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class APIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. Inheritance Object BaseSDKException HTTPException APIException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class APIException : HTTPException Constructors APIException(String) Initializes a new instance of the APIException class. Declaration public APIException(string message) Parameters Type Name Description String message The message to pass to the calling code. APIException(String, Exception) Initializes a new instance of the APIException class. Declaration public APIException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.AuthenticationException.html": {
    "href": "api/VpnSDK.AuthenticationException.html",
    "title": "Class AuthenticationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class AuthenticationException Exception AuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. Inheritance Object BaseSDKException HTTPException AuthenticationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class AuthenticationException : HTTPException Constructors AuthenticationException(String) Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException(string message) Parameters Type Name Description String message The message to pass to the calling code. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.BaseSDKException.html": {
    "href": "api/VpnSDK.BaseSDKException.html",
    "title": "Class BaseSDKException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class BaseSDKException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. Inheritance Object BaseSDKException CoreException HTTPException UnknownErrorException VpnException WFPException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public abstract class BaseSDKException : Exception Constructors BaseSDKException(String) Initializes a new instance of the BaseSDKException class. Declaration public BaseSDKException(string message) Parameters Type Name Description String message The message that describes the error. BaseSDKException(String, Exception) Initializes a new instance of the BaseSDKException class. Declaration public BaseSDKException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type. Declaration public virtual ErrorType Type { get; } Property Value Type Description ErrorType The error type."
  },
  "api/VpnSDK.Common.Dns.DnsResolutionResult.html": {
    "href": "api/VpnSDK.Common.Dns.DnsResolutionResult.html",
    "title": "Class DnsResolutionResult | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class DnsResolutionResult Represents the result of a DNS resolution. Inheritance Object DnsResolutionResult Namespace : VpnSDK.Common.Dns Assembly : cs.temp.dll.dll Syntax public class DnsResolutionResult Properties IpAddresses Gets or sets the IP address resolved from the DNS. Declaration public List<IPAddress>? IpAddresses { get; set; } Property Value Type Description Nullable < List < IPAddress >> IsDnsResolutionAllowedFurther Gets or sets a value indicating whether further DNS resolution is allowed. Declaration public bool IsDnsResolutionAllowedFurther { get; set; } Property Value Type Description Boolean TimeToLive Gets or sets the Time to Live (TTL) value in seconds for caching the DNS resolution result. Declaration public int TimeToLive { get; set; } Property Value Type Description Int32"
  },
  "api/VpnSDK.Common.Dns.html": {
    "href": "api/VpnSDK.Common.Dns.html",
    "title": "Namespace VpnSDK.Common.Dns | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Common.Dns Classes DnsResolutionResult Represents the result of a DNS resolution. Interfaces IDnsRequestResolver Represents an interface for resolving DNS requests."
  },
  "api/VpnSDK.Common.Dns.IDnsRequestResolver.html": {
    "href": "api/VpnSDK.Common.Dns.IDnsRequestResolver.html",
    "title": "Interface IDnsRequestResolver | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IDnsRequestResolver Represents an interface for resolving DNS requests. Namespace : VpnSDK.Common.Dns Assembly : cs.temp.dll.dll Syntax public interface IDnsRequestResolver Methods ResolveAsync(String) Asynchronously resolves the specified domain name and returns the corresponding IP address. Declaration Task<DnsResolutionResult> ResolveAsync(string domain) Parameters Type Name Description String domain The domain name to resolve. Returns Type Description Task < DnsResolutionResult > A task that represents the asynchronous resolution operation and contains the resolved IP address."
  },
  "api/VpnSDK.Common.Enums.html": {
    "href": "api/VpnSDK.Common.Enums.html",
    "title": "Namespace VpnSDK.Common.Enums | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Common.Enums Enums SplitTunnelMode Specifies the split tunneling mode for VPN traffic."
  },
  "api/VpnSDK.Common.Enums.SplitTunnelMode.html": {
    "href": "api/VpnSDK.Common.Enums.SplitTunnelMode.html",
    "title": "Enum SplitTunnelMode | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum SplitTunnelMode Specifies the split tunneling mode for VPN traffic. Namespace : VpnSDK.Common.Enums Assembly : cs.temp.dll.dll Syntax public enum SplitTunnelMode Fields Name Description Disabled Disables split tunneling. All network traffic goes through the VPN tunnel. RouteSelectedTrafficOutsideVpn Routes selected network traffic outside the VPN tunnel."
  },
  "api/VpnSDK.Common.Settings.html": {
    "href": "api/VpnSDK.Common.Settings.html",
    "title": "Namespace VpnSDK.Common.Settings | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Common.Settings Classes SplitTunnelApp Represents a split tunneling application. SplitTunnelDomain Represents a domain that can be split tunneled."
  },
  "api/VpnSDK.Common.Settings.SplitTunnelApp.html": {
    "href": "api/VpnSDK.Common.Settings.SplitTunnelApp.html",
    "title": "Class SplitTunnelApp | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class SplitTunnelApp Represents a split tunneling application. Inheritance Object SplitTunnelApp Namespace : VpnSDK.Common.Settings Assembly : cs.temp.dll.dll Syntax public class SplitTunnelApp Constructors SplitTunnelApp(String, String) Initializes a new instance of the SplitTunnelApp class with the specified name and path. Declaration public SplitTunnelApp(string name, string path) Parameters Type Name Description String name The name of the application. String path The path of the application. Properties Name Gets the name of the application. Declaration public string Name { get; } Property Value Type Description String Path Gets the path of the application. Declaration public string Path { get; } Property Value Type Description String"
  },
  "api/VpnSDK.Common.Settings.SplitTunnelDomain.html": {
    "href": "api/VpnSDK.Common.Settings.SplitTunnelDomain.html",
    "title": "Class SplitTunnelDomain | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class SplitTunnelDomain Represents a domain that can be split tunneled. Inheritance Object SplitTunnelDomain Namespace : VpnSDK.Common.Settings Assembly : cs.temp.dll.dll Syntax public class SplitTunnelDomain Constructors SplitTunnelDomain(String, Boolean) Initializes a new instance of the SplitTunnelDomain class with the specified domain name and exclusion of subdomains. Declaration public SplitTunnelDomain(string domainName, bool includeAllSubdomains = false) Parameters Type Name Description String domainName The domain name. Boolean includeAllSubdomains Optional. Specifies whether to include all subdomains. Default is false. Properties DomainName Gets or sets the domain name. Declaration public string DomainName { get; } Property Value Type Description String IncludeAllSubdomains Gets or sets a value indicating whether to include all subdomains. Declaration public bool IncludeAllSubdomains { get; set; } Property Value Type Description Boolean"
  },
  "api/VpnSDK.ConnectionAlreadyEstablishedException.html": {
    "href": "api/VpnSDK.ConnectionAlreadyEstablishedException.html",
    "title": "Class ConnectionAlreadyEstablishedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionAlreadyEstablishedException Exception ConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. Inheritance Object BaseSDKException VpnException ConnectionAlreadyEstablishedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionAlreadyEstablishedException : VpnException Constructors ConnectionAlreadyEstablishedException(String) Initializes a new instance of the ConnectionAlreadyEstablishedException class. Declaration public ConnectionAlreadyEstablishedException(string message) Parameters Type Name Description String message The message to pass to the calling code. ConnectionAlreadyEstablishedException(String, Exception) Initializes a new instance of the ConnectionAlreadyEstablishedException class. Declaration public ConnectionAlreadyEstablishedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException"
  },
  "api/VpnSDK.ConnectionException.html": {
    "href": "api/VpnSDK.ConnectionException.html",
    "title": "Class ConnectionException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionException Exception ConnectionException. Fires when a VPN connection has failed. Inheritance Object BaseSDKException VpnException ConnectionException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionException : VpnException Constructors ConnectionException(String) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string message) Parameters Type Name Description String message The message to pass to the calling code. ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.ConnectionTerminatedException.html": {
    "href": "api/VpnSDK.ConnectionTerminatedException.html",
    "title": "Class ConnectionTerminatedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionTerminatedException Exception ConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. Inheritance Object BaseSDKException VpnException ConnectionTerminatedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionTerminatedException : VpnException Constructors ConnectionTerminatedException(String) Initializes a new instance of the ConnectionTerminatedException class. Declaration public ConnectionTerminatedException(string message) Parameters Type Name Description String message The message to pass to the calling code. ConnectionTerminatedException(String, Exception) Initializes a new instance of the ConnectionTerminatedException class. Declaration public ConnectionTerminatedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.CoreException.html": {
    "href": "api/VpnSDK.CoreException.html",
    "title": "Class CoreException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class CoreException Inheritance Object BaseSDKException CoreException AccountMetadataException EmptyAvailableVpnProtocolsException InvalidConfigurationException NotElevatedException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class CoreException : BaseSDKException Constructors CoreException(String) Initializes a new instance of the CoreException class. Declaration public CoreException(string message) Parameters Type Name Description String message The message that describes the error. CoreException(String, Exception) Initializes a new instance of the CoreException class. Declaration public CoreException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception."
  },
  "api/VpnSDK.DataTransferEventArgs.html": {
    "href": "api/VpnSDK.DataTransferEventArgs.html",
    "title": "Class DataTransferEventArgs | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class DataTransferEventArgs Holds the VPN network data transfer information. Inheritance Object DataTransferEventArgs Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class DataTransferEventArgs : EventArgs Constructors DataTransferEventArgs(Int64, Int64) Initializes a new instance of the DataTransferEventArgs class. Declaration public DataTransferEventArgs(long downloadedBytes, long uploadedBytes) Parameters Type Name Description Int64 downloadedBytes Downloaded data size in bytes. Int64 uploadedBytes Uploaded data size in bytes. Properties DownloadedBytes Gets the downloaded data size in bytes. Declaration public long DownloadedBytes { get; } Property Value Type Description Int64 UploadedBytes Gets the uploaded data size in bytes. Declaration public long UploadedBytes { get; } Property Value Type Description Int64 Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators Equality(DataTransferEventArgs, DataTransferEventArgs) Checks whether the given 2 instance contains same value or not. Declaration public static bool operator ==(DataTransferEventArgs argsLeft, DataTransferEventArgs argsRight) Parameters Type Name Description DataTransferEventArgs argsLeft First instance to compare. DataTransferEventArgs argsRight Second instance to compare. Returns Type Description Boolean True if both the instances have same values otherwise False. Inequality(DataTransferEventArgs, DataTransferEventArgs) Checks whether the given 2 instance contains same value or not. Declaration public static bool operator !=(DataTransferEventArgs argsLeft, DataTransferEventArgs argsRight) Parameters Type Name Description DataTransferEventArgs argsLeft First instance to compare. DataTransferEventArgs argsRight Second instance to compare. Returns Type Description Boolean True if both the instances have same values otherwise False."
  },
  "api/VpnSDK.DnsConfigurationException.html": {
    "href": "api/VpnSDK.DnsConfigurationException.html",
    "title": "Class DnsConfigurationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class DnsConfigurationException Represents an exception thrown when there is a DNS configuration issue. Inheritance Object BaseSDKException VpnException DnsConfigurationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class DnsConfigurationException : VpnException Constructors DnsConfigurationException(String) Initializes a new instance of the DnsConfigurationException class. Declaration public DnsConfigurationException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. DnsConfigurationException(String, Exception) Initializes a new instance of the DnsConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public DnsConfigurationException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type"
  },
  "api/VpnSDK.DTO.ApiHttpError.html": {
    "href": "api/VpnSDK.DTO.ApiHttpError.html",
    "title": "Class ApiHttpError | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ApiHttpError Class ApiHttpError. This class is used as a data class for WLVPN API errors. Inheritance Object ApiHttpError ApiProxyError Implements ISDKError Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class ApiHttpError : ISDKError Properties HttpResponse Gets API's response . Can be null. Declaration public HttpResponseMessage HttpResponse { get; } Property Value Type Description HttpResponseMessage RequestUri Gets the URI that was used with HTTP request. Declaration public Uri RequestUri { get; } Property Value Type Description Uri ResponseTime Gets API request response time, if any. Declaration public TimeSpan? ResponseTime { get; } Property Value Type Description Nullable < TimeSpan > SystemException Gets the system , if any. Sometimes the API requests fail because of the system, not because the API is responding with a bad status. For example, this happens if a user has bad Internet connection and API request fails with . Declaration public Exception SystemException { get; } Property Value Type Description Exception Implements ISDKError"
  },
  "api/VpnSDK.DTO.ApiProxyError.html": {
    "href": "api/VpnSDK.DTO.ApiProxyError.html",
    "title": "Class ApiProxyError | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ApiProxyError Class APIProxyError. Is used as a data class for API proxy errors. Inheritance Object ApiHttpError ApiProxyError Implements ISDKError Inherited Members ApiHttpError.HttpResponse ApiHttpError.RequestUri ApiHttpError.ResponseTime ApiHttpError.SystemException Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class ApiProxyError : ApiHttpError, ISDKError Properties Hostname Gets API proxy hostname. Declaration public string Hostname { get; } Property Value Type Description String Implements ISDKError"
  },
  "api/VpnSDK.DTO.ConnectionError.html": {
    "href": "api/VpnSDK.DTO.ConnectionError.html",
    "title": "Class ConnectionError | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionError Class ConnectionError. Describes any connection error. Inheritance Object ConnectionError Implements ISDKError Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class ConnectionError : ISDKError Constructors ConnectionError(String, String, String, String, IConnectionConfiguration, Exception) Initializes a new instance of the ConnectionError class. Declaration public ConnectionError(string hostname, string ip, string cityCode, string countryCode, IConnectionConfiguration connectionConfiguration, Exception systemException) Parameters Type Name Description String hostname The VPN server hostname. String ip The VPN server IP address. String cityCode The VPN server city code. String countryCode The VPN server country code. IConnectionConfiguration connectionConfiguration The VPN protocol configuration. Exception systemException The exception that occurred. Properties CityCode Gets a city code of a server. Declaration public string CityCode { get; } Property Value Type Description String ConnectionConfiguration Gets a VPN protocol configuration. Declaration public IConnectionConfiguration ConnectionConfiguration { get; } Property Value Type Description IConnectionConfiguration CountryCode Gets a country code of a server. Declaration public string CountryCode { get; } Property Value Type Description String Hostname Gets a hostname of a server. Declaration public string Hostname { get; } Property Value Type Description String Ip Gets an IP address of a server. Declaration public string Ip { get; } Property Value Type Description String SystemException Gets the system , if any. Sometimes the API requests fail because of the system, not because the API is responding with a bad status. For example, this happens if a user has bad Internet connection and API request fails with . Declaration public Exception SystemException { get; } Property Value Type Description Exception Implements ISDKError"
  },
  "api/VpnSDK.DTO.html": {
    "href": "api/VpnSDK.DTO.html",
    "title": "Namespace VpnSDK.DTO | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.DTO Classes ApiHttpError Class ApiHttpError. This class is used as a data class for WLVPN API errors. ApiProxyError Class APIProxyError. Is used as a data class for API proxy errors. ConnectionError Class ConnectionError. Describes any connection error. NetworkGeolocation Class NetworkGeolocation. Represents a network geolocation determined from a GeoIP service. OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 ) VPN connections. WireguardConfiguration Class WireguardConfiguration. Interfaces ISDKError Interface ISDKError. Describes an SDK error that may occur during API requests or VPN connection process. For more info see: ApiHttpError , ApiProxyError , ConnectionError ."
  },
  "api/VpnSDK.DTO.ISDKError.html": {
    "href": "api/VpnSDK.DTO.ISDKError.html",
    "title": "Interface ISDKError | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface ISDKError Interface ISDKError. Describes an SDK error that may occur during API requests or VPN connection process. For more info see: ApiHttpError , ApiProxyError , ConnectionError . Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public interface ISDKError Properties SystemException Gets the system , if any. Sometimes the API requests fail because of the system, not because the API is responding with a bad status. For example, this happens if a user has bad Internet connection and API request fails with . Declaration Exception SystemException { get; } Property Value Type Description Exception"
  },
  "api/VpnSDK.DTO.NetworkGeolocation.html": {
    "href": "api/VpnSDK.DTO.NetworkGeolocation.html",
    "title": "Class NetworkGeolocation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NetworkGeolocation Class NetworkGeolocation. Represents a network geolocation determined from a GeoIP service. Inheritance Object NetworkGeolocation Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class NetworkGeolocation Properties City Gets the name of the current city. Declaration public string City { get; } Property Value Type Description String The city. Country Gets the name of the current country. Declaration public string Country { get; } Property Value Type Description String The country. CountryCode Gets the ISO Alpha-2 country code for the current Country . Declaration public string CountryCode { get; } Property Value Type Description String The ISO Alpha-2 country code. IPAddress Gets the current IP address. Declaration public IPAddress IPAddress { get; } Property Value Type Description IPAddress The current IP address. Latitude Gets the latitude. Declaration public decimal Latitude { get; } Property Value Type Description Decimal The latitude. Longitude Gets the longitude. Declaration public decimal Longitude { get; } Property Value Type Description Decimal The longitude. Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Implicit(GeoIP to NetworkGeolocation) Performs an implicit conversion to NetworkGeolocation . Declaration public static implicit operator NetworkGeolocation(GeoIP geoIp) Parameters Type Name Description GeoIP geoIp The Zorg GeoIP. Returns Type Description NetworkGeolocation The result of the conversion."
  },
  "api/VpnSDK.DTO.OpenVpnConfiguration.html": {
    "href": "api/VpnSDK.DTO.OpenVpnConfiguration.html",
    "title": "Class OpenVpnConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. Inheritance Object OpenVpnConfiguration Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class OpenVpnConfiguration Properties CertificateAuthorityFilePath Gets or sets the file path (absolute or relative) to the Certificate Authority CRT file. Declaration public string CertificateAuthorityFilePath { get; set; } Property Value Type Description String ConfigurationFileOptions Declaration public Dictionary<string, string[]> ConfigurationFileOptions { get; set; } Property Value Type Description Dictionary < String , String []> LogLevel Gets or sets the OpenVPN executable log level. Declaration public OpenVpnLogLevel LogLevel { get; set; } Property Value Type Description OpenVpnLogLevel The OpenVPN executable log level. OpenVpnDirectory Gets or sets the OpenVPN directory. Declaration public string OpenVpnDirectory { get; set; } Property Value Type Description String The OpenVPN directory. OpenVpnExecutableFileName Gets or sets the file name of the OpenVPN executable. Declaration public string OpenVpnExecutableFileName { get; set; } Property Value Type Description String TapDeviceDescription Gets or sets the TAP device description. This refers to the network adapter that OpenVPN uses. Declaration public string TapDeviceDescription { get; set; } Property Value Type Description String The TAP device description."
  },
  "api/VpnSDK.DTO.RasConfiguration.html": {
    "href": "api/VpnSDK.DTO.RasConfiguration.html",
    "title": "Class RasConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 ) VPN connections. Inheritance Object RasConfiguration Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class RasConfiguration Properties RasDeviceDescription Gets or sets the device description used by Windows. Declaration public string RasDeviceDescription { get; set; } Property Value Type Description String UseConnectionTypeInName Gets or sets a value indicating whether to use the connection type in the VPN entry. Declaration public bool UseConnectionTypeInName { get; set; } Property Value Type Description Boolean true if using the connection type in VPN entry, otherwise, false ."
  },
  "api/VpnSDK.DTO.WireguardConfiguration.html": {
    "href": "api/VpnSDK.DTO.WireguardConfiguration.html",
    "title": "Class WireguardConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class WireguardConfiguration Class WireguardConfiguration. Inheritance Object WireguardConfiguration Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class WireguardConfiguration Constructors WireguardConfiguration() Initializes a new instance of the WireguardConfiguration class. Declaration public WireguardConfiguration() Properties ConfigDirectory Gets or sets WireGuard® config directory. Declaration public string ConfigDirectory { get; set; } Property Value Type Description String ConnectionName Gets or sets WireGuard® connection name. Declaration public string ConnectionName { get; set; } Property Value Type Description String TunDeviceDescription Gets or sets WinTUN device description used by Windows. Declaration public string TunDeviceDescription { get; set; } Property Value Type Description String"
  },
  "api/VpnSDK.EmptyAvailableVpnProtocolsException.html": {
    "href": "api/VpnSDK.EmptyAvailableVpnProtocolsException.html",
    "title": "Class EmptyAvailableVpnProtocolsException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class EmptyAvailableVpnProtocolsException Exception EmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. Inheritance Object BaseSDKException CoreException EmptyAvailableVpnProtocolsException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class EmptyAvailableVpnProtocolsException : CoreException Constructors EmptyAvailableVpnProtocolsException(String) Initializes a new instance of the EmptyAvailableVpnProtocolsException class. Declaration public EmptyAvailableVpnProtocolsException(string message) Parameters Type Name Description String message The message to pass to the calling code. EmptyAvailableVpnProtocolsException(String, Exception) Initializes a new instance of the EmptyAvailableVpnProtocolsException class. Declaration public EmptyAvailableVpnProtocolsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException CoreException"
  },
  "api/VpnSDK.Enums.AccountStatus.html": {
    "href": "api/VpnSDK.Enums.AccountStatus.html",
    "title": "Enum AccountStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum AccountStatus Enum AccountStatus. Refers to what status the account has on the API. Values \"Paid\", \"Expired\", \"Trial\" and \"Free\" should be ignored as they only pertain to specific resellers who have been informed directly about these values. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum AccountStatus : short Fields Name Description Active The account is currently active and valid. CapReached The account has reached it's data cap. Closed The account has been closed permanently. Expired (Legacy / Unused) The account has expired. Free (Legacy / Unused) The account is a free account. Paid (Legacy / Unused) The account has been paid for. Paused The account has been paused. Pending The account is currently pending setup. Suspended The account has been suspended temporarily. Trial (Legacy / Unused) The account is on a trial. Unknown The account status is unknown."
  },
  "api/VpnSDK.Enums.AuthenticationStatus.html": {
    "href": "api/VpnSDK.Enums.AuthenticationStatus.html",
    "title": "Enum AuthenticationStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum AuthenticationStatus Fields Name Description Authenticated Authentication has successfully completed and credentials are valid. InProgress Operation in progress. NotAuthenticated The WLVPN API was not reachable or the credentials provided were invalid."
  },
  "api/VpnSDK.Enums.ConnectionStatus.html": {
    "href": "api/VpnSDK.Enums.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum ConnectionStatus Fields Name Description Connected Connected successfully. Connecting Connecting to the server. Disconnected Disconnected. Disconnecting Disconnecting."
  },
  "api/VpnSDK.Enums.DnsFilteringMode.html": {
    "href": "api/VpnSDK.Enums.DnsFilteringMode.html",
    "title": "Enum DnsFilteringMode | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum DnsFilteringMode Enum representing the DNS filtering mode. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum DnsFilteringMode Fields Name Description Disabled DNS filtering is disabled. WithPartnerDns DNS filtering is enabled with partner DNS. This will only work if the partner DNS is configured. WithWLVPNDns DNS filtering is enabled with WLVPN DNS."
  },
  "api/VpnSDK.Enums.DriverInstallResult.html": {
    "href": "api/VpnSDK.Enums.DriverInstallResult.html",
    "title": "Enum DriverInstallResult | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum DriverInstallResult Enum DriverInstallResult. Describes the result of installing a device driver. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum DriverInstallResult Fields Name Description Failed The driver installation failed. RebootRequired The driver installed successfully but a reboot is required. Success The driver was installed successfully."
  },
  "api/VpnSDK.Enums.ErrorType.html": {
    "href": "api/VpnSDK.Enums.ErrorType.html",
    "title": "Enum ErrorType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum ErrorType Enum ErrorType. Represents the different types of errors that the SDK can return for localization purposes. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum ErrorType Fields Name Description AccountMetadataError Failed when account metadata is incorrect. ApiAuthenticationError An authentication request fails due to invalid credentials or Bad Request. ApiError Authentication request failed due to API issues. ApiFetchLocationsError Failed to refresh locations list. ApiNotAuthorizedError User is not logged in. ApiOAuthError Failed to refresh access token. CoreInvalidConfiguration VpnSDK is not configured correctly. CoreNoAvailableProtocols There's no VPN protocols available on this system. CoreNotElevated The running process is not elevated. DnsConfigurationError Failed when the DNS is not configured correctly None No error. ReconnectOnPowerEventException Failed to reconnect after power event. ServerListError Failed to get Server List. TAPAdapterError TAP Adapter is not installed or not working correctly. Unknown Unknown error type. VpnAlreadyConnected VPN connection is already established. VpnAuthenticationError Failed to authenticate the current user against the selected VPN server. User's credentials are expired? VpnConnectionError VPN connection raised an exception, connection was closed. Happens during connection process. VpnConnectionUnexpectedlyDisconnected VPN connection disconnected unexpectedly. VpnLocationIsNull A null location is provided to an SDK method. VpnUnsupportedProtocolError Failed to create a connection using VPN protocol that is not supported. WireGuardApiError Failed to get WireGuard configuration due to API issues."
  },
  "api/VpnSDK.Enums.html": {
    "href": "api/VpnSDK.Enums.html",
    "title": "Namespace VpnSDK.Enums | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Enums Enums AccountStatus Enum AccountStatus. Refers to what status the account has on the API. Values \"Paid\", \"Expired\", \"Trial\" and \"Free\" should be ignored as they only pertain to specific resellers who have been informed directly about these values. AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. DnsFilteringMode Enum representing the DNS filtering mode. DriverInstallResult Enum DriverInstallResult. Describes the result of installing a device driver. ErrorType Enum ErrorType. Represents the different types of errors that the SDK can return for localization purposes. LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better. NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. OpenVpnLogLevel Enum OpenVpnLogLevel. Refers to what level of logging OpenVPN should use. OperationStatus Enum OperationStatus. Represents the current status of an operation. RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation."
  },
  "api/VpnSDK.Enums.LoadLevel.html": {
    "href": "api/VpnSDK.Enums.LoadLevel.html",
    "title": "Enum LoadLevel | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum LoadLevel Fields Name Description High High user load. Invalid Invalid load level. Low Low user load. Medium Normal user load."
  },
  "api/VpnSDK.Enums.NetworkConnectionType.html": {
    "href": "api/VpnSDK.Enums.NetworkConnectionType.html",
    "title": "Enum NetworkConnectionType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum NetworkConnectionType Fields Name Description Automatic Network connection type is not specified. This type is used for automatic protocol option. IKEv2 Internet Key Exchange Version 2 (IPSec) OpenVPN OpenVPN WireGuard WireGuard®"
  },
  "api/VpnSDK.Enums.NetworkProtocolType.html": {
    "href": "api/VpnSDK.Enums.NetworkProtocolType.html",
    "title": "Enum NetworkProtocolType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum NetworkProtocolType Fields Name Description TCP Transmission Control Protocol UDP User Datagram Protocol"
  },
  "api/VpnSDK.Enums.OpenVpnCipherType.html": {
    "href": "api/VpnSDK.Enums.OpenVpnCipherType.html",
    "title": "Enum OpenVpnCipherType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OpenVpnCipherType Fields Name Description AES_128_CBC Advanced Encryption Standard / Rijndael encryption using 128-bit cipher block chaining. AES_256_CBC Advanced Encryption Standard / Rijndael encryption using 256-bit cipher block chaining."
  },
  "api/VpnSDK.Enums.OpenVpnLogLevel.html": {
    "href": "api/VpnSDK.Enums.OpenVpnLogLevel.html",
    "title": "Enum OpenVpnLogLevel | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OpenVpnLogLevel Enum OpenVpnLogLevel. Refers to what level of logging OpenVPN should use. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OpenVpnLogLevel Fields Name Description Fatal Fatal errors only. Info Standard information. Normal Normal logging level. PacketDebug Debug logging with per-packet info. Trace Extreme trace debugging, do not use this unless you know what you are doing. VerboseDebug Verbose debugging. This should be avoided."
  },
  "api/VpnSDK.Enums.OperationStatus.html": {
    "href": "api/VpnSDK.Enums.OperationStatus.html",
    "title": "Enum OperationStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OperationStatus Enum OperationStatus. Represents the current status of an operation. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OperationStatus Fields Name Description Completed Failed InProgress"
  },
  "api/VpnSDK.Enums.RefreshLocationListStatus.html": {
    "href": "api/VpnSDK.Enums.RefreshLocationListStatus.html",
    "title": "Enum RefreshLocationListStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum RefreshLocationListStatus Fields Name Description Error The list refresh failed. RefreshedWithChanges The list refresh is complete. RefreshedWithNoChanges This is returned when the refresh has not found any changes in the server list. Refreshing The list is being refreshed."
  },
  "api/VpnSDK.Extensions.ExceptionExtensions.html": {
    "href": "api/VpnSDK.Extensions.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ExceptionExtensions ExceptionExtensions class. Provides extension methods to help gather exception info. Inheritance Object ExceptionExtensions Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class ExceptionExtensions Methods GetAllExceptionMessages(Exception) Gets all exception messages. Declaration public static IEnumerable<string> GetAllExceptionMessages(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < String > IEnumerable<System.String>. GetAllExceptions(Exception) Gets all inner exceptions. Declaration public static IEnumerable<Exception> GetAllExceptions(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < Exception > IEnumerable<Exception>."
  },
  "api/VpnSDK.Extensions.html": {
    "href": "api/VpnSDK.Extensions.html",
    "title": "Namespace VpnSDK.Extensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Extensions Classes ExceptionExtensions ExceptionExtensions class. Provides extension methods to help gather exception info. LocationExtensions LocationExtensions class. Provides extension methods for locations. RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple LoadLevel value."
  },
  "api/VpnSDK.Extensions.LocationExtensions.html": {
    "href": "api/VpnSDK.Extensions.LocationExtensions.html",
    "title": "Class LocationExtensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class LocationExtensions LocationExtensions class. Provides extension methods for locations. Inheritance Object LocationExtensions Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class LocationExtensions Methods Ping(ReadOnlyObservableCollection<ILocation>) Pings all ILocation's in the list. Declaration public static Task Ping(this ReadOnlyObservableCollection<ILocation> list) Parameters Type Name Description ReadOnlyObservableCollection < ILocation > list List of ILocation . Returns Type Description Task A Task ."
  },
  "api/VpnSDK.Extensions.RegionLoadChecker.html": {
    "href": "api/VpnSDK.Extensions.RegionLoadChecker.html",
    "title": "Class RegionLoadChecker | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple LoadLevel value. Inheritance Object RegionLoadChecker Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class RegionLoadChecker Methods GetRegionLoadLevel(Nullable<UInt16>) Get LoadLevel from a Region's load level. Declaration public static LoadLevel GetRegionLoadLevel(this ushort? value) Parameters Type Name Description Nullable < UInt16 > value The number value representing the load level. Returns Type Description LoadLevel The appropriate LoadLevel associated with the value."
  },
  "api/VpnSDK.FetchLocationsException.html": {
    "href": "api/VpnSDK.FetchLocationsException.html",
    "title": "Class FetchLocationsException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class FetchLocationsException Exception FetchLocationsException. Fires when location fetching has failed. Inheritance Object BaseSDKException HTTPException FetchLocationsException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class FetchLocationsException : HTTPException Constructors FetchLocationsException(String) Initializes a new instance of the FetchLocationsException class. Declaration public FetchLocationsException(string message) Parameters Type Name Description String message The message to pass to the calling code. FetchLocationsException(String, Exception) Initializes a new instance of the FetchLocationsException class. Declaration public FetchLocationsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.Helpers.BatchPingUtility.html": {
    "href": "api/VpnSDK.Helpers.BatchPingUtility.html",
    "title": "Class BatchPingUtility | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class BatchPingUtility Class BatchPingUtility. Provides utilities for batch pinging multiple locations in parallel. Inheritance Object BatchPingUtility Namespace : VpnSDK.Helpers Assembly : cs.temp.dll.dll Syntax public static class BatchPingUtility Methods Ping(ILocation[]) Pings all locations in parallel. Declaration public static Task Ping(params ILocation[] locations) Parameters Type Name Description ILocation [] locations Locations to ping. Returns Type Description Task Task."
  },
  "api/VpnSDK.Helpers.html": {
    "href": "api/VpnSDK.Helpers.html",
    "title": "Namespace VpnSDK.Helpers | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Helpers Classes BatchPingUtility Class BatchPingUtility. Provides utilities for batch pinging multiple locations in parallel. VersionHelper Version Helper class. VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues."
  },
  "api/VpnSDK.Helpers.VersionHelper.html": {
    "href": "api/VpnSDK.Helpers.VersionHelper.html",
    "title": "Class VersionHelper | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VersionHelper Version Helper class. Inheritance Object VersionHelper Namespace : VpnSDK.Helpers Assembly : cs.temp.dll.dll Syntax public class VersionHelper Methods EnableTls12IfNeeded() EnableTls12IfNeeded. Declaration public static void EnableTls12IfNeeded() GetNetFrameworkVersion() Gets the .NET Framework version number from Windows Registry. Declaration public static int GetNetFrameworkVersion() Returns Type Description Int32 returns framework's version number. Returns 0 if the version wasn't identified. (see: https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed?view=netframework-4.8 for more info)."
  },
  "api/VpnSDK.Helpers.VpnProtocolDiagnostics.html": {
    "href": "api/VpnSDK.Helpers.VpnProtocolDiagnostics.html",
    "title": "Class VpnProtocolDiagnostics | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues. Inheritance Object VpnProtocolDiagnostics Namespace : VpnSDK.Helpers Assembly : cs.temp.dll.dll Syntax public class VpnProtocolDiagnostics Methods DiagnoseProtocolsAvailability(OpenVpnConfiguration, RasConfiguration, WireguardConfiguration, Dictionary<NetworkConnectionType, Boolean>) Diagnoses the protocols availability. Declaration public static void DiagnoseProtocolsAvailability(OpenVpnConfiguration openVpnConfiguration, RasConfiguration rasConfiguration, WireguardConfiguration wireguardConfiguration, Dictionary<NetworkConnectionType, bool> availableProtocols) Parameters Type Name Description OpenVpnConfiguration openVpnConfiguration The Open VPN configuration. RasConfiguration rasConfiguration The RAS configuration. WireguardConfiguration wireguardConfiguration The WireGuard® configuration. Dictionary < NetworkConnectionType , Boolean > availableProtocols The available protocols."
  },
  "api/VpnSDK.html": {
    "href": "api/VpnSDK.html",
    "title": "Namespace VpnSDK | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK Classes AccountMetadataException Exception AccountMetadataException. Fires when the account metadata is incorrect.. APIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. AuthenticationException Exception AuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. BaseSDKException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. ConnectionAlreadyEstablishedException Exception ConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. ConnectionException Exception ConnectionException. Fires when a VPN connection has failed. ConnectionTerminatedException Exception ConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. CoreException DataTransferEventArgs Holds the VPN network data transfer information. DnsConfigurationException Represents an exception thrown when there is a DNS configuration issue. EmptyAvailableVpnProtocolsException Exception EmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. FetchLocationsException Exception FetchLocationsException. Fires when location fetching has failed. HTTPException Exception HTTPException. Fired as a base exception for any HTTP/S issue such as server failures, reach-ability problems and API request rejections. InvalidConfigurationException Exception InvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. NotAuthorizedException Exception NotAuthorizedException. Fired when API requests are fired before authenticating a user. NotElevatedException Exception NotElevatedException. Fires when the running process is not elevated. NullLocationException Exception NullLocationException. Fires when a null location is provided to an SDK method. OAuthException Exception OAuthException. Fired when SDK is unable to refresh the access token. OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. ReconnectOnPowerEventException Exception ReconnectOnPowerEventException. Fires when failed to reconnect on power event. SDKBuilder<T> Class SDKBuilder. Used to build an instance of a ISDK . ServerListException Exception ServerListException. Fired when the app is unable to load servers. TapAdapterException Exception TapAdapterException. Fired when an OpenVPN TAP adapter is not installed or not working correctly. UnknownErrorException UnknownErrorException. Fires when an unknown related error occurs. UnsupportedProtocolException Exception UnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. VPNAuthenticationException Exception VPNAuthenticationException. Fired when an authentication request fails due to API issues. VpnException Exception VpnException. Fired when any VPN connection error occurs. VpnHostServiceException Exception VpnHostServiceException. Fired when there's an issue with VpnHostService startup. WFPException Exception WFPException. Fired when any network filtering errors occur. WireGuardAPIException Exception WireGuardAPIException. Fired when getting WG configuration fails due to API issues. WireGuardConnectionConfigurationBuilder Class WireGuardConnectionConfigurationBuilder. Builder for an IConnectionConfiguration object. Delegates SDKChangeEventHandler<T> Delegate SDKChangeEventHandler. Used when state has changed from previous to current. SDKEventHandler Delegate SDKEventHandler. SDKEventHandler<T> Delegate SDKEventHandler. SDKOperationEventHandler Delegate SDKOperationEventHandler. Represents the current state of an operation. SDKOperationEventHandler<T> Delegate SDKOperationEventHandler. Represents the current state of an operation."
  },
  "api/VpnSDK.HTTPException.html": {
    "href": "api/VpnSDK.HTTPException.html",
    "title": "Class HTTPException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class HTTPException Exception HTTPException. Fired as a base exception for any HTTP/S issue such as server failures, reach-ability problems and API request rejections. Inheritance Object BaseSDKException HTTPException APIException AuthenticationException FetchLocationsException NotAuthorizedException OAuthException ServerListException WireGuardAPIException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class HTTPException : BaseSDKException Constructors HTTPException(String) Initializes a new instance of the HTTPException class. Declaration public HTTPException(string message) Parameters Type Name Description String message The message that describes the error. HTTPException(String, Exception) Initializes a new instance of the HTTPException class. Declaration public HTTPException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception."
  },
  "api/VpnSDK.Interfaces.html": {
    "href": "api/VpnSDK.Interfaces.html",
    "title": "Namespace VpnSDK.Interfaces | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Interfaces Interfaces IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. IConnectionInfo Interface IConnectionInfo. Describes the current connection info. ILocation Interface ILocation. Describes an interface for a generic location. IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . IRegion Interface IRegion. Describes a region as an ILocation . ISDK Interface ISDK. Provides an interface for the SDK APIs. IUser Interface IUser. Provides an interface for API users/customers. IWireGuardConnectionConfiguration Interface IWireGuardConnectionConfiguration. Tagging interface for Wireguard-based IConnectionConfiguration ."
  },
  "api/VpnSDK.Interfaces.IBestAvailable.html": {
    "href": "api/VpnSDK.Interfaces.IBestAvailable.html",
    "title": "Interface IBestAvailable | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName ILocation.PingMs ILocation.Country ILocation.City ILocation.AvailableProtocols ILocation.Ping() Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IBestAvailable : ILocation, INotifyPropertyChanged Properties BestRegion Gets the best region to be used at connect time. Declaration IRegion BestRegion { get; } Property Value Type Description IRegion The current best region. If null, haversine is used at connect time to determine the best region. See Also ILocation"
  },
  "api/VpnSDK.Interfaces.IConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IConnectionConfiguration.html",
    "title": "Interface IConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IConnectionConfiguration Properties ConnectionType Gets the connection type to use. ( OpenVPN, IKEv2, etc. ). Declaration NetworkConnectionType ConnectionType { get; } Property Value Type Description NetworkConnectionType ManagerType Gets the VPN manager type to use. Declaration VpnManagerType ManagerType { get; } Property Value Type Description VpnManagerType"
  },
  "api/VpnSDK.Interfaces.IConnectionInfo.html": {
    "href": "api/VpnSDK.Interfaces.IConnectionInfo.html",
    "title": "Interface IConnectionInfo | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IConnectionInfo Interface IConnectionInfo. Describes the current connection info. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IConnectionInfo Properties Configuration Gets connection's IConnectionConfiguration . Declaration IConnectionConfiguration Configuration { get; } Property Value Type Description IConnectionConfiguration IsAutomaticProtocolUsed Gets a value indicating whether SDK selects an automatic VPN protocol for a new VPN connection. Declaration bool IsAutomaticProtocolUsed { get; } Property Value Type Description Boolean IsDnsProtected Gets a value indicating whether DNS leak protection is enabled. Declaration bool IsDnsProtected { get; } Property Value Type Description Boolean IsIPv6Protected Gets a value indicating whether is IPv6 leak protection is enabled. Declaration bool IsIPv6Protected { get; } Property Value Type Description Boolean IsKillKwitchOn Gets a value indicating whether KillSwitch is enabled. Declaration bool IsKillKwitchOn { get; } Property Value Type Description Boolean IsLanTrafficAllowed Gets a value indicating whether local resources access is allowed. Declaration bool IsLanTrafficAllowed { get; } Property Value Type Description Boolean Location Gets server's ILocation info. Declaration ILocation Location { get; } Property Value Type Description ILocation Protocol Gets connection's protocol NetworkConnectionType . Declaration NetworkConnectionType Protocol { get; } Property Value Type Description NetworkConnectionType ServerIp Gets server's IP address. Declaration IPAddress ServerIp { get; } Property Value Type Description IPAddress"
  },
  "api/VpnSDK.Interfaces.ILocation.html": {
    "href": "api/VpnSDK.Interfaces.ILocation.html",
    "title": "Interface ILocation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface ILocation Interface ILocation. Describes an interface for a generic location. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface ILocation : INotifyPropertyChanged Properties AvailableProtocols Gets the list of VPN protocols available for this Location. Declaration List<NetworkConnectionType> AvailableProtocols { get; } Property Value Type Description List < NetworkConnectionType > City Gets the city of the location to connect to. This field may be empty on some location objects. Declaration string City { get; } Property Value Type Description String CityCode Gets the city code. Declaration string CityCode { get; } Property Value Type Description String The city code. Country Gets the country of the location to connect to. Declaration string Country { get; } Property Value Type Description String CountryCode Gets the country code. Declaration string CountryCode { get; } Property Value Type Description String The country code. Id Gets the identifier. Declaration string Id { get; } Property Value Type Description String The identifier. PingMs Gets the ping in milliseconds. Declaration ushort? PingMs { get; } Property Value Type Description Nullable < UInt16 > The ping in milliseconds, else null. SearchName Gets the string used for searching. Declaration string SearchName { get; } Property Value Type Description String The name to be used in searches. Methods Ping() Pings this instance. Declaration Task<ushort?> Ping() Returns Type Description Task < Nullable < UInt16 >> Task<System.Nullable<System.UInt16>>."
  },
  "api/VpnSDK.Interfaces.IOpenVpnConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IOpenVpnConnectionConfiguration.html",
    "title": "Interface IOpenVpnConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. Inherited Members IConnectionConfiguration.ConnectionType IConnectionConfiguration.ManagerType Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IOpenVpnConnectionConfiguration : IConnectionConfiguration Properties Cipher Gets or sets the cypher type to use. Declaration OpenVpnCipherType Cipher { get; set; } Property Value Type Description OpenVpnCipherType Port Gets or sets remote port. Declaration ushort Port { get; set; } Property Value Type Description UInt16 ProtocolType Gets or sets the protocol type to use. Declaration NetworkProtocolType ProtocolType { get; set; } Property Value Type Description NetworkProtocolType Scramble Gets or sets a value indicating whether scramble is enabled or not. Declaration bool Scramble { get; set; } Property Value Type Description Boolean See Also IConnectionConfiguration"
  },
  "api/VpnSDK.Interfaces.IRasConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IRasConnectionConfiguration.html",
    "title": "Interface IRasConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . Inherited Members IConnectionConfiguration.ConnectionType IConnectionConfiguration.ManagerType Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IRasConnectionConfiguration : IConnectionConfiguration See Also IConnectionConfiguration"
  },
  "api/VpnSDK.Interfaces.IRegion.html": {
    "href": "api/VpnSDK.Interfaces.IRegion.html",
    "title": "Interface IRegion | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IRegion Interface IRegion. Describes a region as an ILocation . Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName ILocation.PingMs ILocation.Country ILocation.City ILocation.AvailableProtocols ILocation.Ping() Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IRegion : ILocation, INotifyPropertyChanged Properties GeoCoordinate Gets the geo coordinate that presents the region on a map. Declaration GeoCoordinate GeoCoordinate { get; } Property Value Type Description GeoCoordinate The current IRegion 's geo coordinate. Load Gets the user load of the region. Higher values mean that the server is nearing capacity. Declaration ushort? Load { get; } Property Value Type Description Nullable < UInt16 > The current user load between 0% to 100% as a flattened value. Methods PingAll() Pings all children of this instance. Declaration Task<ushort?> PingAll() Returns Type Description Task < Nullable < UInt16 >> Task<System.Nullable<System.UInt16>>, where UInt16 is an average ping value for all children. See Also ILocation"
  },
  "api/VpnSDK.Interfaces.ISDK.html": {
    "href": "api/VpnSDK.Interfaces.ISDK.html",
    "title": "Interface ISDK | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface ISDK Interface ISDK. Provides an interface for the SDK APIs. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface ISDK : INotifyPropertyChanged, IDisposable Properties ActiveConnectionInformation Gets the active connection information. Declaration IConnectionInfo ActiveConnectionInformation { get; } Property Value Type Description IConnectionInfo The active connection information, null if not connected. AllowLANTraffic Gets or sets a value indicating whether to allow LAN traffic even when AllowOnlyVPNConnectivity is enabled. Declaration bool AllowLANTraffic { get; set; } Property Value Type Description Boolean true if [allow LAN traffic]; otherwise, false . AllowLocalAdaptersWhenConnected Gets or sets a value indicating whether to allow local network adapters when connected to a VPN. Declaration bool AllowLocalAdaptersWhenConnected { get; set; } Property Value Type Description Boolean true if [allow local adapters when connected]; otherwise, false . Remarks If this property is false , the traffic won't be able to leak through any other network adapter. The only network adapter allowed to send and receive traffic will be a VPN adapter. If this property is true , the local adapters won't be banned. LAN access will be available, but the chance of IP address leak will be higher. AllowOnlyVPNConnectivity Gets or sets a value indicating whether to allow only VPN connectivity and block standard Internet connections. Declaration bool AllowOnlyVPNConnectivity { get; set; } Property Value Type Description Boolean true if [allow only VPN connectivity]; otherwise, false . AvailableProtocols Gets the available VPN types. Declaration Dictionary<NetworkConnectionType, bool> AvailableProtocols { get; } Property Value Type Description Dictionary < NetworkConnectionType , Boolean > A dictionary where the key is what protocol and the value is whether it's available. BrandingInfo Gets the branding info for the brand. This property is null if branding info is not set for this particular brand. Declaration IBrandingInfo BrandingInfo { get; } Property Value Type Description VpnSDK.Interfaces.IBrandingInfo CurrentNetworkGeolocation Gets the current network geolocation. Declaration NetworkGeolocation CurrentNetworkGeolocation { get; } Property Value Type Description NetworkGeolocation The current network geolocation when established, else null . DisableDNSLeakProtection Gets or sets a value indicating whether to disable DNS leak protection. Declaration bool DisableDNSLeakProtection { get; set; } Property Value Type Description Boolean true if DNS leak protection is disabled otherwise, false . DisableIPv6LeakProtection Gets or sets a value indicating whether to disable IPv6 leak protection. Declaration bool DisableIPv6LeakProtection { get; set; } Property Value Type Description Boolean true if IPv6 leak protection is disabled otherwise, false . DnsFilterMode Gets or sets the DNS filtering mode. Declaration DnsFilteringMode DnsFilterMode { get; set; } Property Value Type Description DnsFilteringMode DnsRequestResolver Gets or sets the external DNS resolver used for resolving domain names to IP addresses. Declaration IDnsRequestResolver DnsRequestResolver { get; set; } Property Value Type Description IDnsRequestResolver The external DNS resolver. IsConnected Gets a value indicating whether VPN connection established. Declaration bool IsConnected { get; } Property Value Type Description Boolean IsConnecting Gets a value indicating whether SDK is in the process of establishing a new connection. Declaration bool IsConnecting { get; } Property Value Type Description Boolean IsConnectionCancelled Gets a value indicating whether VPN connection process was canceled. Declaration bool IsConnectionCancelled { get; } Property Value Type Description Boolean IsDisconnecting Gets a value indicating whether SDK is disconnecting from VPN server. Declaration bool IsDisconnecting { get; } Property Value Type Description Boolean IsDisposed Gets a value indicating whether object is disposed. Declaration bool IsDisposed { get; } Property Value Type Description Boolean IsElevated Gets a value indicating whether the running process is elevated. Declaration bool IsElevated { get; } Property Value Type Description Boolean IsSplitTunnelEnabled Gets or sets a value indicating whether split tunneling is enabled. Declaration bool IsSplitTunnelEnabled { get; set; } Property Value Type Description Boolean Locations Gets the read only observable collection responsible for locations. Declaration ReadOnlyObservableCollection<ILocation> Locations { get; } Property Value Type Description ReadOnlyObservableCollection < ILocation > The locations. SplitTunnelAllowedApps Gets or sets the list of allowed applications for split tunneling. Declaration List<SplitTunnelApp> SplitTunnelAllowedApps { get; set; } Property Value Type Description List < SplitTunnelApp > SplitTunnelAllowedDomains Gets or sets a collection of allowed domains for split tunneling. Declaration List<SplitTunnelDomain> SplitTunnelAllowedDomains { get; set; } Property Value Type Description List < SplitTunnelDomain > SplitTunnelMode Gets or sets the mode for split tunneling. Declaration SplitTunnelMode SplitTunnelMode { get; set; } Property Value Type Description SplitTunnelMode TapDriverInstalled Gets a value indicating whether TAP driver installed. Declaration bool TapDriverInstalled { get; } Property Value Type Description Boolean User Gets the user which was logged in. This property is null if user was not authorized. Declaration IUser User { get; } Property Value Type Description IUser Methods Connect(IEnumerable<ILocation>, IEnumerable<IConnectionConfiguration>, CancellationToken) Connects the user to the best VPN location in an enumerable using the protocol configurations provided in connectionConfigurations list. Declaration Task Connect(IEnumerable<ILocation> locations, IEnumerable<IConnectionConfiguration> connectionConfigurations, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < ILocation > locations The target locations. IEnumerable < IConnectionConfiguration > connectionConfigurations The list of protocol configurations for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Exceptions Type Condition UnsupportedProtocolException ConnectionType is not supported. VPNAuthenticationException VPN server rejected credentials. VPNAuthenticationException User not logged in. HTTPException User account became invalidated. VPNAuthenticationException VPN authorization failed. Please try connecting to a different location. Connect(IEnumerable<ILocation>, IConnectionConfiguration, CancellationToken) Connects the user to the best VPN location in an enumerable using the specified configuration. Declaration Task Connect(IEnumerable<ILocation> locations, IConnectionConfiguration connectionConfiguration, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < ILocation > locations The target locations. IConnectionConfiguration connectionConfiguration The protocol configuration parameters for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Exceptions Type Condition UnsupportedProtocolException ConnectionType is not supported. VPNAuthenticationException VPN server rejected credentials. VPNAuthenticationException User not logged in. HTTPException User account became invalidated. VPNAuthenticationException VPN authorization failed. Please try connecting to a different location. Connect(ILocation, IEnumerable<IConnectionConfiguration>, CancellationToken) Connects the user to the best VPN location using the protocol configurations provided in connectionConfigurations list. Declaration Task Connect(ILocation location, IEnumerable<IConnectionConfiguration> connectionConfigurations, CancellationToken cancellationToken = null) Parameters Type Name Description ILocation location The target location. IEnumerable < IConnectionConfiguration > connectionConfigurations The list of protocol configurations for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Remarks SDK tries to connect to a VPN server using first protocol configuration provided in connectionConfigurations list. If it fails to connect, SDK will try the next protocol configuration in the list. This process will be repeated until the end of the list is hit. Exceptions Type Condition UnsupportedProtocolException ConnectionType is not supported. VPNAuthenticationException VPN server rejected credentials. VPNAuthenticationException User not logged in. HTTPException User account became invalidated. VPNAuthenticationException VPN authorization failed. Please try connecting to a different location. Connect(ILocation, IConnectionConfiguration, CancellationToken) Connects the user to the VPN location specified using the specified configuration. Declaration Task Connect(ILocation location, IConnectionConfiguration connectionConfiguration, CancellationToken cancellationToken = null) Parameters Type Name Description ILocation location The target location. IConnectionConfiguration connectionConfiguration The protocol configuration parameters for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Exceptions Type Condition UnsupportedProtocolException ConnectionType is not supported. VPNAuthenticationException VPN server rejected credentials. VPNAuthenticationException User not logged in. HTTPException User account became invalidated. VPNAuthenticationException VPN authorization failed. Please try connecting to a different location. Disconnect() Disconnects the user from the active VPN connection. Declaration Task Disconnect() Returns Type Description Task A Task . DisposeAsync() Disposes SDK asynchronously. If there's an active VPN connection, SDK will gently close it and clean up all the resources. Declaration Task DisposeAsync() Returns Type Description Task A Task . Remarks Use this method, for example, on application exit. This will help to keep the app responsive. GetAccountMetadata() Gets the metadata values for account. Declaration Task<Dictionary<string, string>> GetAccountMetadata() Returns Type Description Task < Dictionary < String , String >> Metadata associated with account. GetBrandingInfo(String) Gets branding information. Declaration Task<IBrandingInfo> GetBrandingInfo(string slugOrDomain) Parameters Type Name Description String slugOrDomain Brand's slug or domain name. Returns Type Description Task < VpnSDK.Interfaces.IBrandingInfo > A Task . InstallTapDriver() Installs the OpenVPN TAP driver. Removes existing TAP drivers if already installed. Declaration Task<DriverInstallResult> InstallTapDriver() Returns Type Description Task < DriverInstallResult > Task<DriverInstallResult>. Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. UnsupportedProtocolException Thrown when OpenVPN protocol is not available. NotElevatedException This feature only works when the running process is elevated. UnsupportedProtocolException SDK is configured for running user space only. TAP Driver cannot be set up from user space. UnsupportedProtocolException OpenVPN is not available. Login(String, String) Logs in the specified username and password against the WLVPN API. Declaration Task Login(string username, string password) Parameters Type Name Description String username The username. String password The password. Returns Type Description Task A Task . Exceptions Type Condition HTTPException Connection already in progress. ServerListException Failed to retrieve server list. Login(String, String, String) Logs in the specified username and password against the WLVPN API. Before doing this type of log in, SDK does branding API request using a slug/brand or domain provided. Declaration Task Login(string username, string password, string slugOrDomain) Parameters Type Name Description String username The username. String password The password. String slugOrDomain Brand's slug or domain name. Returns Type Description Task A Task . LoginWithAuthTokens(String, String) Declaration Task LoginWithAuthTokens(string accessToken, string refreshToken) Parameters Type Name Description String accessToken String refreshToken Returns Type Description Task LoginWithAuthTokens(String, String, String) Declaration Task LoginWithAuthTokens(string accessToken, string refreshToken, string slugOrDomain) Parameters Type Name Description String accessToken String refreshToken String slugOrDomain Returns Type Description Task Logout() Logs out the current user. Declaration Task Logout() Returns Type Description Task A Task . RefreshServerInfo() Refreshes the server info manually. Declaration Task<bool> RefreshServerInfo() Returns Type Description Task < Boolean > A Task that returns a bool indicating if the server info refresh executed or not. If it false is returned, then you tried to call the task twice or more times within 5 minute interval. Remarks Can be called once in 5 minutes. Exceptions Type Condition NotAuthorizedException No user logged in to refresh server info. ServerListException Failed to retrieve server list. RefreshUserToken() Refreshes the user token manually. Declaration Task RefreshUserToken() Returns Type Description Task A Task . Exceptions Type Condition NotAuthorizedException No user logged in to refresh. HTTPException User account became invalidated. SaveAccountMetadata(Dictionary<String, String>) Set the metadata values for account. Declaration Task<bool> SaveAccountMetadata(Dictionary<string, string> metadata) Parameters Type Name Description Dictionary < String , String > metadata Returns Type Description Task < Boolean > True, if metadata saved successfully, otherwise False. StopSplitTunnelDriverService(Boolean) Stop split tunnel driver service. Declaration bool StopSplitTunnelDriverService(bool waitForStop) Parameters Type Name Description Boolean waitForStop Bool parameter to wait till service is stopped. Returns Type Description Boolean Returns true on success otherwise false. UninstallSplitTunnelDriverService(Boolean) Uninstall split tunnel driver service. Declaration bool UninstallSplitTunnelDriverService(bool waitForStop) Parameters Type Name Description Boolean waitForStop Bool parameter to wait till service is removed. Returns Type Description Boolean Returns true on success otherwise false. Events AuthenticationCredentialsExpired Fires when a users authentication credentials have expired. Declaration event SDKEventHandler AuthenticationCredentialsExpired Event Type Type Description SDKEventHandler AuthenticationStatusChanged Fires when the authentication status of the active SDK user changes. Declaration event SDKEventHandler<AuthenticationStatus> AuthenticationStatusChanged Event Type Type Description SDKEventHandler < AuthenticationStatus > DataTransferUpdate Occurs for every second when VPN is connected and data transfer information of VPN adapter is available Declaration event SDKEventHandler<DataTransferEventArgs> DataTransferUpdate Event Type Type Description SDKEventHandler < DataTransferEventArgs > ErrorRaised Fires when an error happens on VPN connection or during REST API request. Declaration event SDKEventHandler<ISDKError> ErrorRaised Event Type Type Description SDKEventHandler < ISDKError > LocationsRefreshStatusChanged Occurs whenever the servers are being refreshed. Declaration event SDKEventHandler<RefreshLocationListStatus> LocationsRefreshStatusChanged Event Type Type Description SDKEventHandler < RefreshLocationListStatus > TapDeviceInstallationStatusChanged Occurs when the TAP device installation status changed. Declaration event SDKOperationEventHandler TapDeviceInstallationStatusChanged Event Type Type Description SDKOperationEventHandler TokensRefreshed Raised when tokens are refreshed Declaration event EventHandler<IUser> TokensRefreshed Event Type Type Description EventHandler < IUser > UserLocationStatusChanged User location changed event. Declaration event SDKOperationEventHandler<NetworkGeolocation> UserLocationStatusChanged Event Type Type Description SDKOperationEventHandler < NetworkGeolocation > VpnConnectionStatusChanged Fires when the active VPN connection status changes. Provides what the status was previously and what it is now. Declaration event SDKChangeEventHandler<ConnectionStatus> VpnConnectionStatusChanged Event Type Type Description SDKChangeEventHandler < ConnectionStatus > Remarks When using this event, make sure to check if the before was Connected and the after is Disconnected. If this is the case, the VPN connection was unexpectedly disconnected for an unknown reason. Ensure to notify the user that this happened or automatically reconnect for them depending on your use case."
  },
  "api/VpnSDK.Interfaces.IUser.html": {
    "href": "api/VpnSDK.Interfaces.IUser.html",
    "title": "Interface IUser | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IUser Interface IUser. Provides an interface for API users/customers. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IUser : INotifyPropertyChanged Properties AccessToken Gets the access token. Declaration string AccessToken { get; } Property Value Type Description String AccessTokenExpiry Gets the UTC time when the access token expires, or null if no access token is currently set. Declaration DateTime? AccessTokenExpiry { get; } Property Value Type Description Nullable < DateTime > EmailAddress Gets the email address provided by the API. This will be set to null if third-party authentication is used. Declaration string EmailAddress { get; } Property Value Type Description String The email address. IsValid Gets a value indicating whether returns true if the user object is valid. Declaration bool IsValid { get; } Property Value Type Description Boolean true if this instance is valid; otherwise, false . RefreshToken Gets the refresh token. Declaration string RefreshToken { get; } Property Value Type Description String Status Gets the current account status. Declaration AccountStatus Status { get; } Property Value Type Description AccountStatus The status. SubscriptionExpiry Gets the subscription expiry date if known. Declaration DateTime? SubscriptionExpiry { get; } Property Value Type Description Nullable < DateTime > The subscription expiry. VpnCredential Gets the VPN server credential. Declaration NetworkCredential VpnCredential { get; } Property Value Type Description NetworkCredential The VPN credential."
  },
  "api/VpnSDK.Interfaces.IWireGuardConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IWireGuardConnectionConfiguration.html",
    "title": "Interface IWireGuardConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IWireGuardConnectionConfiguration Interface IWireGuardConnectionConfiguration. Tagging interface for Wireguard-based IConnectionConfiguration . Inherited Members IConnectionConfiguration.ConnectionType IConnectionConfiguration.ManagerType Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IWireGuardConnectionConfiguration : IConnectionConfiguration Properties AllowLan Gets or sets a value indicating whether LAN resource are not routed to VPN tunnel. Declaration bool AllowLan { get; set; } Property Value Type Description Boolean"
  },
  "api/VpnSDK.InvalidConfigurationException.html": {
    "href": "api/VpnSDK.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class InvalidConfigurationException Exception InvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. Inheritance Object BaseSDKException CoreException InvalidConfigurationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class InvalidConfigurationException : CoreException Constructors InvalidConfigurationException(String) Initializes a new instance of the InvalidConfigurationException class. Declaration public InvalidConfigurationException(string message) Parameters Type Name Description String message The message to pass to the calling code. InvalidConfigurationException(String, Exception) Initializes a new instance of the InvalidConfigurationException class. Declaration public InvalidConfigurationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type"
  },
  "api/VpnSDK.NotAuthorizedException.html": {
    "href": "api/VpnSDK.NotAuthorizedException.html",
    "title": "Class NotAuthorizedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NotAuthorizedException Exception NotAuthorizedException. Fired when API requests are fired before authenticating a user. Inheritance Object BaseSDKException HTTPException NotAuthorizedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NotAuthorizedException : HTTPException Constructors NotAuthorizedException(String) Initializes a new instance of the NotAuthorizedException class. Declaration public NotAuthorizedException(string message) Parameters Type Name Description String message The message to pass to the calling code. NotAuthorizedException(String, Exception) Initializes a new instance of the NotAuthorizedException class. Declaration public NotAuthorizedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.NotElevatedException.html": {
    "href": "api/VpnSDK.NotElevatedException.html",
    "title": "Class NotElevatedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NotElevatedException Exception NotElevatedException. Fires when the running process is not elevated. Inheritance Object BaseSDKException CoreException NotElevatedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NotElevatedException : CoreException Constructors NotElevatedException(String) Initializes a new instance of the NotElevatedException class. Declaration public NotElevatedException(string message) Parameters Type Name Description String message The message to pass to the calling code. NotElevatedException(String, Exception) Initializes a new instance of the NotElevatedException class. Declaration public NotElevatedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException CoreException"
  },
  "api/VpnSDK.NullLocationException.html": {
    "href": "api/VpnSDK.NullLocationException.html",
    "title": "Class NullLocationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NullLocationException Exception NullLocationException. Fires when a null location is provided to an SDK method. Inheritance Object BaseSDKException VpnException NullLocationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NullLocationException : VpnException Constructors NullLocationException(String) Initializes a new instance of the NullLocationException class. Declaration public NullLocationException(string message) Parameters Type Name Description String message The message to pass to the calling code. NullLocationException(String, Exception) Initializes a new instance of the NullLocationException class. Declaration public NullLocationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.OAuthException.html": {
    "href": "api/VpnSDK.OAuthException.html",
    "title": "Class OAuthException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OAuthException Exception OAuthException. Fired when SDK is unable to refresh the access token. Inheritance Object BaseSDKException HTTPException OAuthException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class OAuthException : HTTPException Constructors OAuthException(String) Initializes a new instance of the OAuthException class. Declaration public OAuthException(string message) Parameters Type Name Description String message The message to pass to the calling code. OAuthException(String, Exception) Initializes a new instance of the OAuthException class. Declaration public OAuthException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also HTTPException APIException"
  },
  "api/VpnSDK.OpenVpnConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.OpenVpnConnectionConfigurationBuilder.html",
    "title": "Class OpenVpnConnectionConfigurationBuilder | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. Inheritance Object OpenVpnConnectionConfigurationBuilder Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class OpenVpnConnectionConfigurationBuilder Methods Build() Builds an IConnectionConfiguration based off this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetCipher(OpenVpnCipherType) Sets the OpenVPN cipher. Declaration public OpenVpnConnectionConfigurationBuilder SetCipher(OpenVpnCipherType cipherType) Parameters Type Name Description OpenVpnCipherType cipherType Type of the cipher. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetNetworkProtocol(NetworkProtocolType) Sets the network protocol. Declaration public OpenVpnConnectionConfigurationBuilder SetNetworkProtocol(NetworkProtocolType protocol) Parameters Type Name Description NetworkProtocolType protocol The protocol. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetPort(UInt16) Sets remote port. Declaration public OpenVpnConnectionConfigurationBuilder SetPort(ushort port) Parameters Type Name Description UInt16 port The port. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetScramble(Boolean) Sets whether to use XOR-based traffic scrambling or not. Declaration public OpenVpnConnectionConfigurationBuilder SetScramble(bool scramble) Parameters Type Name Description Boolean scramble if set to true traffic scrambling is enabled. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder."
  },
  "api/VpnSDK.RasConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.RasConnectionConfigurationBuilder.html",
    "title": "Class RasConnectionConfigurationBuilder | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. Inheritance Object RasConnectionConfigurationBuilder Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class RasConnectionConfigurationBuilder Methods Build() Builds this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetConnectionType(NetworkConnectionType) Sets the type of the connection. Restricted to IKEv2 . Declaration public RasConnectionConfigurationBuilder SetConnectionType(NetworkConnectionType connectionType) Parameters Type Name Description NetworkConnectionType connectionType Type of the connection. Returns Type Description RasConnectionConfigurationBuilder RasConnectionConfigurationBuilder."
  },
  "api/VpnSDK.ReconnectOnPowerEventException.html": {
    "href": "api/VpnSDK.ReconnectOnPowerEventException.html",
    "title": "Class ReconnectOnPowerEventException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ReconnectOnPowerEventException Exception ReconnectOnPowerEventException. Fires when failed to reconnect on power event. Inheritance Object BaseSDKException VpnException ReconnectOnPowerEventException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ReconnectOnPowerEventException : VpnException Constructors ReconnectOnPowerEventException(String) Initializes a new instance of the ReconnectOnPowerEventException class. Declaration public ReconnectOnPowerEventException(string message) Parameters Type Name Description String message The message to pass to the calling code. ReconnectOnPowerEventException(String, Exception) Initializes a new instance of the ReconnectOnPowerEventException class. Declaration public ReconnectOnPowerEventException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.SDKBuilder-1.html": {
    "href": "api/VpnSDK.SDKBuilder-1.html",
    "title": "Class SDKBuilder<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class SDKBuilder<T> Class SDKBuilder. Used to build an instance of a ISDK . Inheritance Object SDKBuilder<T> Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class SDKBuilder<T> where T : ISDK Type Parameters Name Description T ISDK type. Methods Create() Creates an ISDK based off the parameters chained before the call. Declaration public T Create() Returns Type Description T An instance of ISDK . SetApiBaseUrl(String[]) Sets the API base URL. Declaration public SDKBuilder<T> SetApiBaseUrl(params string[] value) Parameters Type Name Description String [] value The API base URLs. Returns Type Description SDKBuilder <T> a builder instance. SetApiKey(String) Sets the SDK API key. Declaration public SDKBuilder<T> SetApiKey(string value) Parameters Type Name Description String value the API key. Returns Type Description SDKBuilder <T> a builder instance. SetApplicationName(String) Sets the name of the application. Declaration public SDKBuilder<T> SetApplicationName(string value) Parameters Type Name Description String value The value. Returns Type Description SDKBuilder <T> a builder instance. SetAuthenticationToken(String) Sets the authentication token. Declaration public SDKBuilder<T> SetAuthenticationToken(string value) Parameters Type Name Description String value The value. Returns Type Description SDKBuilder <T> a builder instance. SetAutomaticRefreshTokenHandling(Boolean) Sets the automatic refresh token hanlding. Declaration public SDKBuilder<T> SetAutomaticRefreshTokenHandling(bool automaticallyRefresh) Parameters Type Name Description Boolean automaticallyRefresh If set to true, SDK will automatically update OAuth Refresh Token. Returns Type Description SDKBuilder <T> a builder instance. SetBrandingKey(String) Sets the Branding key. If this value is specified, providing API Key and Authentication Token is not required. If this value specified, you have to use Login(String, String, String) for logging in a user. Declaration public SDKBuilder<T> SetBrandingKey(string value) Parameters Type Name Description String value the branding key. Returns Type Description SDKBuilder <T> a builder instance. SetBuildMockup(Boolean) Declaration public SDKBuilder<T> SetBuildMockup(bool value) Parameters Type Name Description Boolean value Returns Type Description SDKBuilder <T> SetOpenVpnConfiguration(OpenVpnConfiguration) Sets the configuration for the Open VPN connection type. Declaration public SDKBuilder<T> SetOpenVpnConfiguration(OpenVpnConfiguration value) Parameters Type Name Description OpenVpnConfiguration value The OpenVPN configuration. Returns Type Description SDKBuilder <T> The current builder instance. SetRasConfiguration(RasConfiguration) Sets the RAS Configuration. Declaration public SDKBuilder<T> SetRasConfiguration(RasConfiguration value) Parameters Type Name Description RasConfiguration value the configuration. Returns Type Description SDKBuilder <T> a builder instance. SetRunInUserspace(Boolean) Sets run in user space mode. This will disable OpenVPN and WFP. Declaration public SDKBuilder<T> SetRunInUserspace(bool runInUserspace) Parameters Type Name Description Boolean runInUserspace True if you want SDK to run in user space. Returns Type Description SDKBuilder <T> a builder instance. SetServerListCache(Nullable<TimeSpan>) Sets the time interval for server list data cache. If not set, SDK wont cache the data. Declaration public SDKBuilder<T> SetServerListCache(TimeSpan? time) Parameters Type Name Description Nullable < TimeSpan > time Time interval. Returns Type Description SDKBuilder <T> a builder instance. SetSynchronizationContext(SynchronizationContext) Sets synchronization context. Declaration public SDKBuilder<T> SetSynchronizationContext(SynchronizationContext context) Parameters Type Name Description SynchronizationContext context . Returns Type Description SDKBuilder <T> a builder instance. SetTokenBasedAuthentication(Boolean) Sets whether the SDK should use token-based authentication. Declaration public SDKBuilder<T> SetTokenBasedAuthentication(bool useTokenAuthentication) Parameters Type Name Description Boolean useTokenAuthentication True means token based authentication will be performed otherwise user credentials will be used. Returns Type Description SDKBuilder <T> a builder instance. SetWireguardConfiguration(WireguardConfiguration) Sets the configuration for the WireGuard® connection type. Declaration public SDKBuilder<T> SetWireguardConfiguration(WireguardConfiguration value) Parameters Type Name Description WireguardConfiguration value The WireGuard® configuration. Returns Type Description SDKBuilder <T> a builder instance. Validate() Validates the configuration before creating the SDK instance. The validation done depends on the type of client. Declaration public void Validate() Exceptions Type Condition InvalidConfigurationException Either the API Key, application name or authentication token were not set. EmptyAvailableVpnProtocolsException No VPN protocols were configured."
  },
  "api/VpnSDK.SDKChangeEventHandler-1.html": {
    "href": "api/VpnSDK.SDKChangeEventHandler-1.html",
    "title": "Delegate SDKChangeEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKChangeEventHandler<T> Delegate SDKChangeEventHandler. Used when state has changed from previous to current. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKChangeEventHandler<in T>(ISDK sender, T previous, T current); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. T previous The previous state. T current The current state. Type Parameters Name Description T The state type."
  },
  "api/VpnSDK.SDKEventHandler.html": {
    "href": "api/VpnSDK.SDKEventHandler.html",
    "title": "Delegate SDKEventHandler | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKEventHandler Delegate SDKEventHandler. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKEventHandler(ISDK sender); Parameters Type Name Description ISDK sender The SDK instance that has fired the event."
  },
  "api/VpnSDK.SDKEventHandler-1.html": {
    "href": "api/VpnSDK.SDKEventHandler-1.html",
    "title": "Delegate SDKEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKEventHandler<T> Delegate SDKEventHandler. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKEventHandler<in T>(ISDK sender, T args); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. T args The event payload. Type Parameters Name Description T The event payload type."
  },
  "api/VpnSDK.SDKOperationEventHandler.html": {
    "href": "api/VpnSDK.SDKOperationEventHandler.html",
    "title": "Delegate SDKOperationEventHandler | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKOperationEventHandler Delegate SDKOperationEventHandler. Represents the current state of an operation. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKOperationEventHandler(ISDK sender, OperationStatus status); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. OperationStatus status The current operation status."
  },
  "api/VpnSDK.SDKOperationEventHandler-1.html": {
    "href": "api/VpnSDK.SDKOperationEventHandler-1.html",
    "title": "Delegate SDKOperationEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKOperationEventHandler<T> Delegate SDKOperationEventHandler. Represents the current state of an operation. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKOperationEventHandler<in T>(ISDK sender, OperationStatus status, T args); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. OperationStatus status The current operation status. T args The payload as a result of the operation. Type Parameters Name Description T The payload type."
  },
  "api/VpnSDK.ServerListException.html": {
    "href": "api/VpnSDK.ServerListException.html",
    "title": "Class ServerListException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ServerListException Exception ServerListException. Fired when the app is unable to load servers. Inheritance Object BaseSDKException HTTPException ServerListException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ServerListException : HTTPException Constructors ServerListException(String) Initializes a new instance of the ServerListException class. Declaration public ServerListException(string message) Parameters Type Name Description String message The message to pass to the calling code. ServerListException(String, Exception) Initializes a new instance of the ServerListException class. Declaration public ServerListException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.TapAdapterException.html": {
    "href": "api/VpnSDK.TapAdapterException.html",
    "title": "Class TapAdapterException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class TapAdapterException Exception TapAdapterException. Fired when an OpenVPN TAP adapter is not installed or not working correctly. Inheritance Object BaseSDKException VpnException TapAdapterException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class TapAdapterException : VpnException Constructors TapAdapterException(String) Initializes a new instance of the TapAdapterException class. Declaration public TapAdapterException(string message) Parameters Type Name Description String message The message. TapAdapterException(String, Exception) Initializes a new instance of the TapAdapterException class. Declaration public TapAdapterException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.UnknownErrorException.html": {
    "href": "api/VpnSDK.UnknownErrorException.html",
    "title": "Class UnknownErrorException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class UnknownErrorException UnknownErrorException. Fires when an unknown related error occurs. Inheritance Object BaseSDKException UnknownErrorException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class UnknownErrorException : BaseSDKException Constructors UnknownErrorException(String) Declaration public UnknownErrorException(string message) Parameters Type Name Description String message UnknownErrorException(String, Exception) Declaration public UnknownErrorException(string message, Exception inner) Parameters Type Name Description String message Exception inner Properties Type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType Overrides BaseSDKException.Type"
  },
  "api/VpnSDK.UnsupportedProtocolException.html": {
    "href": "api/VpnSDK.UnsupportedProtocolException.html",
    "title": "Class UnsupportedProtocolException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class UnsupportedProtocolException Exception UnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. Inheritance Object BaseSDKException VpnException UnsupportedProtocolException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class UnsupportedProtocolException : VpnException Constructors UnsupportedProtocolException(String) Initializes a new instance of the UnsupportedProtocolException class. Declaration public UnsupportedProtocolException(string message) Parameters Type Name Description String message The message to pass to the calling code. UnsupportedProtocolException(String, Exception) Initializes a new instance of the UnsupportedProtocolException class. Declaration public UnsupportedProtocolException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.VPNAuthenticationException.html": {
    "href": "api/VpnSDK.VPNAuthenticationException.html",
    "title": "Class VPNAuthenticationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VPNAuthenticationException Exception VPNAuthenticationException. Fired when an authentication request fails due to API issues. Inheritance Object BaseSDKException VpnException VPNAuthenticationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class VPNAuthenticationException : VpnException Constructors VPNAuthenticationException(String) Initializes a new instance of the VPNAuthenticationException class. Declaration public VPNAuthenticationException(string message) Parameters Type Name Description String message The message. VPNAuthenticationException(String, Exception) Initializes a new instance of the VPNAuthenticationException class. Declaration public VPNAuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.VpnException.html": {
    "href": "api/VpnSDK.VpnException.html",
    "title": "Class VpnException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VpnException Exception VpnException. Fired when any VPN connection error occurs. Inheritance Object BaseSDKException VpnException ConnectionAlreadyEstablishedException ConnectionException ConnectionTerminatedException DnsConfigurationException NullLocationException ReconnectOnPowerEventException TapAdapterException UnsupportedProtocolException VPNAuthenticationException VpnHostServiceException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class VpnException : BaseSDKException Constructors VpnException(String) Initializes a new instance of the VpnException class. Declaration public VpnException(string message) Parameters Type Name Description String message The message to pass to the calling code. VpnException(String, Exception) Initializes a new instance of the VpnException class. Declaration public VpnException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up."
  },
  "api/VpnSDK.VpnHostServiceException.html": {
    "href": "api/VpnSDK.VpnHostServiceException.html",
    "title": "Class VpnHostServiceException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VpnHostServiceException Exception VpnHostServiceException. Fired when there's an issue with VpnHostService startup. Inheritance Object BaseSDKException VpnException VpnHostServiceException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class VpnHostServiceException : VpnException Constructors VpnHostServiceException(String) Initializes a new instance of the VpnHostServiceException class. Declaration public VpnHostServiceException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnHostServiceException(String, Exception) Initializes a new instance of the VpnHostServiceException class. Declaration public VpnHostServiceException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.WFPException.html": {
    "href": "api/VpnSDK.WFPException.html",
    "title": "Class WFPException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class WFPException Exception WFPException. Fired when any network filtering errors occur. Inheritance Object BaseSDKException WFPException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class WFPException : BaseSDKException Constructors WFPException(String) Initializes a new instance of the WFPException class. Declaration public WFPException(string message) Parameters Type Name Description String message The message to pass to the calling code. WFPException(String, Exception) Initializes a new instance of the WFPException class. Declaration public WFPException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner The exception that we are passing up."
  },
  "api/VpnSDK.WireGuardAPIException.html": {
    "href": "api/VpnSDK.WireGuardAPIException.html",
    "title": "Class WireGuardAPIException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class WireGuardAPIException Exception WireGuardAPIException. Fired when getting WG configuration fails due to API issues. Inheritance Object BaseSDKException HTTPException WireGuardAPIException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class WireGuardAPIException : HTTPException Constructors WireGuardAPIException(String) Initializes a new instance of the WireGuardAPIException class. Declaration public WireGuardAPIException(string message) Parameters Type Name Description String message The message to pass to the calling code. WireGuardAPIException(String, Exception) Initializes a new instance of the WireGuardAPIException class. Declaration public WireGuardAPIException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner the exception that we are passing up. Properties Type Gets the error type. Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.WireGuardConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.WireGuardConnectionConfigurationBuilder.html",
    "title": "Class WireGuardConnectionConfigurationBuilder | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class WireGuardConnectionConfigurationBuilder Class WireGuardConnectionConfigurationBuilder. Builder for an IConnectionConfiguration object. Inheritance Object WireGuardConnectionConfigurationBuilder Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class WireGuardConnectionConfigurationBuilder Methods Build() Builds an based off this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetBlockUntunneledTraffic(Boolean) Defines if untunneled traffic is blocked or not. Declaration public WireGuardConnectionConfigurationBuilder SetBlockUntunneledTraffic(bool blockUntunneledTraffic) Parameters Type Name Description Boolean blockUntunneledTraffic When true, blocks all traffic that is neither to nor from the tunnel interface or is to the wrong DNS server. Returns Type Description WireGuardConnectionConfigurationBuilder WireGuardConnectionConfigurationBuilder."
  },
  "articles/branding.html": {
    "href": "articles/branding.html",
    "title": "Branding ConsumerVPN | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Branding ConsumerVPN Provided to you is a copy of the example ConsumerVPN v2 client, a base application that can be easily modified to work with your design. Architected to be simple to iterate on, for most WLVPN partners, you will find yourself using it as a launching point. Requirements You will need to become a registered WLVPN reseller to run the application. If you have not done so already, please visit https://wlvpn.com/#contact to get started. To create your own application from this template, you will need a copy of Visual Studio 2017 or 2019 (preferred). This can be obtained from here: https://www.visualstudio.com/vs/ Once Visual Studio has been installed, you will need to clone or download the repository for the ConsumerVPN application found at https://github.com/wlvpn/ConsumerVPN-v2-Windows . Make sure to checkout the v2 branch. Once downloaded an extracted, open the ConsumerVPN.sln file in the extracted folder. The application is a Microsoft .NET C# WPF application. It follows the normal MVVM patterns associated with a WPF application. This document does not detail the code in the application but how to change the look of the application generated from the code. The application targets .NET Framework 4.6.2 and you may need to install the targeting pack for that or alternatively change the target to .NET Framework 4.7.2. To install .NET framework 4.6.2 either use Visual Studio Installer or download it directly from Microsoft website: https://www.microsoft.com/en-us/download/details.aspx?id=53344 We use the WiX toolset for building installers. You will also need to download and install the WiX Toolset build tools and WiX Toolset Visual Studio Extensions that are compatible with your environment from this link: http://wixtoolset.org/releases/ . The Wix installation will require you to enable .NET 3.5 on your machine. If WiX does not automatically do this for you, perform the following instructions: Press “ Windows Logo ” + “ R ” keys on the keyboard. Type “ appwiz.cpl ” in the “ Run ” command box and press “ ENTER ” on the keyboard or click Run . In the “ Programs and Features ” window, click on the link “ Turn Windows features on or off ”. Check if the “ .NET Framework 3.5 (includes .NET 2.0 and 3.0) ” option is available in it. If yes, then enable it and then click on “ OK ”. Follow the on-screen instructions to complete the installation and restart the computer, if prompted. If you run into any errors, the following link will provide information from Microsoft on how to solve any potential issues. https://answers.microsoft.com/en-us/insider/forum/insider_wintp-insider_install/how-to-instal-net-framework-35-on-windows-10/450b3ba6-4d19-45ae-840e-78519f36d7a4?auth=1 Localization The application supports different languages. Currently, there're English, Spanish, Hindi and Russian language strings available in this repository. You can add your own translation to any other languages. To do that, create a new resource file with the next name Strings.xx.resx under ConsumerVPN->Properties, where xx is 2-letter ISO language name (ex. en , bg , de ). For better work with translations, we recommend you to install ResXManager from Visual Studio Extensions portal. For Visual Studio 2019, you can find the extension here: https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager . Adding new languages and translations is much more easier with the ResXManager extension. Navigating the project Solution Structure The application is divided in to the following solution structure. Folder / Namespace Explanation / Usage Behaviors WPF behavior utilities Controls Custom controls and visual states Enums Various application enumerables Extensions Custom utility class extensions Factories Factory classes that the app uses Helpers Utility classes for dealing with all kinds of data Input Multi Key Gesture classes for hotkeys support Interfaces All interfaces Resources All visual resources are stored here. You will most likely be working in here. There is a branding subfolder in this which contains all the files required to be modified to make the application visually yours. Utils Utility classes ValueConverters Data converters for UI elements ViewModels View models (for standard MVVM development) for all views in the application. Views All the views the application uses. Things to change when branding Application Settings In the ConsumerVPN application properties (found by right clicking on the project in the solution explorer and then going to settings on the left-hand side bar) you will find the following settings. CallSettingsUpgrade - If true , call ApplicationSettingsBase.Upgrade() method on startup. It updates application settings to reflect a more recent installation of the application. Default is true . More info here https://docs.microsoft.com/en-us/dotnet/api/system.configuration.applicationsettingsbase.upgrade Username - User's username. Default is String.Empty . Password - User's password. Default is String.Empty . ConnectionProtocol - VPN protocol. Default is VpnSDK.Enums.NetworkConnectionType.IKEv2 . OpenVpnProtocol - Network protocol that OpenVPN uses. Default is VpnSDK.Enums.NetworkProtocolType.UDP . KillSwitch - If true , KillSwitch feature is on. Default is true . SelectedCity - Place where user's selected city is stored. Default is String.Empty . SelectedCountry - Place where user's selected country is stored. Default is String.Empty . AutoReconnect - If true , the app tries to reconnect on VPN connection termination. Default is false . BlockLANTraffic - If true , the app blocks LAN traffic when KillSwitch is on. Default is false . Scramble - OpenVPN scramble/obfuscate option. If true , OpenVPN obfuscates its traffic. Default is false . CloseStyle - Defines what happens when user tries to close the app. Default is WLVPN.Enums.ApplicationCloseStyle.Dialog . Culture Application culture, 2-letter ISO language name. Default is String.Empty . HideOnStartup - If true , hide the app window on startup. BetaOptIn - If true , use Beta appcast URL, otherwise, use normal appcast URL. Default is false . StartupType - Defines if the app connects to Last/Best location on startup or not. Default is WLVPN.Enums.StartupType.NOP (No operation). ReconnectTries - The number of reconnect tries. Default is 5 . EnableSpeech - If true , enables Speech Engine. Default is false . EnableShortcuts - If true , enables application shortcuts. Default is true . CipherType - OpenVPN Cipher type. Default is VpnSDK.Enums.OpenVpnCipherType.AES_256_CBC . AllowLanInterfaces - If false , the app blocks local network interfaces while connected to a VPN server. Default is true . DisableDNSLeakProtection - If true , disable DNS leak protection. Default is false . DisableIPv6LeakProtection - If true , disable IPV6 leak protection. Default is false . TapDeviceDescription - Custom description for the OpenVPN TAP adapter. Default is TAP-Windows Adapter V9 . These are application settings with their default values. If you want different default values, this is the place where you can update them. Application name and namespace Under the Application section of the project properties, you will want to change the field Assembly Name to something along the lines of your application brand. For example, if you were called ExampleVPN , it would be suggested to call it ExampleVPN . As well as this, you should changed the Default Namespace to CompanyName.ApplicationName . Visual Studio will assist you in updating all the namespaces in the project files automatically, except namespaces in XAML files, that you will have to update manually. Visual Settings Each of the files in the Resources folder may be changed to have your visualization, especially files starting with Branding.* . Each file will be discussed in this section. Branding.System.xaml The Branding.System.xaml file is a WPF resource file that defines application settings. ApiKey and AuthenticationToken will need to be updated to match the data provided to you by WLVPN SDK to ensure you're able to authorize to the backend and use all functionality. <!-- Application Name --> <system:String x:Key=\"ApplicationName\">ConsumerVPN</system:String> <!-- WLVPN API Key. To obtain API Key you need to be a registered WLVPN reseller. If you have not done so already, please visit https://wlvpn.com/#contact to get started. --> <system:String x:Key=\"ApiKey\">YOURAPIKEY</system:String> <!-- WLVPN API Authentication token To obtain API Key you need to be a registered WLVPN reseller. If you have not done so already, please visit https://wlvpn.com/#contact to get started. --> <system:String x:Key=\"AuthenticationToken\">YOURAUTHTOKEN</system:String> <!-- NetSparkle Updater Appcast URLs for stable and beta channels. --> <system:String x:Key=\"AppcastUrl\">https://example.com/stable.xml</system:String> <system:String x:Key=\"BetaAppcastUrl\">https://example.com/beta.xml</system:String> Branding.General.xaml The Branding.General.xaml file is a WPF resource file that defines application images and URLs. <!-- Application Icon --> <ImageSource x:Key=\"ApplicationIcon\">Icons/AppIcon.ico</ImageSource> <!-- Company's website URL --> <system:Uri x:Key=\"WebsiteUrl\">https://example.com</system:Uri> <!-- Forgot password URL --> <system:Uri x:Key=\"ForgotPasswordUrl\">https://example.com</system:Uri> <!-- Sign Up URL --> <system:Uri x:Key=\"SignUpUrl\">https://example.com</system:Uri> <!-- System Tray Icons --> <ImageSource x:Key=\"DisconnectedIcon\">Icons/AppIcon.ico</ImageSource> <ImageSource x:Key=\"ConnectedIcon\">Icons/AppIconConnected.ico</ImageSource> <!-- Login Screen Logo --> <BitmapImage x:Key=\"LoginLogoImage\" UriSource=\"pack://application:,,,/Resources/Images/LoginViewLogo.png\" /> <!-- Login Screen Background --> <ImageSource x:Key=\"LoginBackgroundImage\">Images/LoginBackground.png</ImageSource> <!-- Connected Screen Background Image --> <BitmapImage x:Key=\"ConnectedBackgroundImage\" UriSource=\"pack://application:,,,/Resources/Images/DottedMap.png\" /> Branding.Colors.xaml The Branding.xaml file is a WPF resource file that defines brushes and colors used in various places within the application. Resources are defined in this file using the normal WPF Resource definition forms. If you wish to change a color or a brush, this is the file where you do it. The keys and values defined in the file are shown below and are generally self-explanatory. Refer to the key names to get a better understanding of what the value represents. <!-- Generic colors and brushes --> <Color x:Key=\"AccentColor\">#FF4A90E2</Color> <SolidColorBrush x:Key=\"AccentBrush\" Color=\"{StaticResource AccentColor}\" /> <Color x:Key=\"AccentColor1\">#3483de</Color> <SolidColorBrush x:Key=\"AccentBrush1\" Color=\"{StaticResource AccentColor1}\" /> <Color x:Key=\"AccentColor2\">#2275d7</Color> <SolidColorBrush x:Key=\"AccentBrush2\" Color=\"{StaticResource AccentColor2}\" /> <Color x:Key=\"AccentColor3\">#30363E</Color> <SolidColorBrush x:Key=\"AccentBrush3\" Color=\"{StaticResource AccentColor3}\" /> <Color x:Key=\"AccentColor4\">#1b5dab</Color> <SolidColorBrush x:Key=\"AccentBrush4\" Color=\"{StaticResource AccentColor4}\" /> <Color x:Key=\"IdealForegroundColor\">#FFFFFFFF</Color> <SolidColorBrush x:Key=\"IdealForegroundBrush\" Color=\"{StaticResource IdealForegroundColor}\" /> <Color x:Key=\"IdealForegroundDisabledColor\">#8b8b8b</Color> <SolidColorBrush x:Key=\"IdealForegroundDisabledBrush\" Color=\"{StaticResource IdealForegroundDisabledColor}\" /> <Color x:Key=\"IdealBackgroundDisabledColor\">#333333</Color> <SolidColorBrush x:Key=\"IdealBackgroundDisabledBrush\" Color=\"{StaticResource IdealBackgroundDisabledColor}\" /> <!-- Specific colors and brushes --> <!-- Window Background --> <Color x:Key=\"WindowBackgroundColor\">#0f0f15</Color> <SolidColorBrush x:Key=\"WindowBackgroundBrush\" Color=\"{StaticResource WindowBackgroundColor}\" /> <!-- Window Title --> <Color x:Key=\"WindowTitleColor\">#22000000</Color> <SolidColorBrush x:Key=\"WindowTitleBrush\" Color=\"{StaticResource WindowTitleColor}\" /> <SolidColorBrush x:Key=\"WindowSecondTitleBrush\" Opacity=\"0.4\" Color=\"{StaticResource IdealForegroundColor}\" /> <!-- Dialog Window --> <Color x:Key=\"DialogOverlayColor\">#DD000000</Color> <SolidColorBrush x:Key=\"DialogOverlayBrush\" Color=\"{StaticResource DialogOverlayColor}\" /> <Color x:Key=\"DialogBackgroundColor\">#0f0f15</Color> <SolidColorBrush x:Key=\"DialogBackgroundBrush\" Color=\"{StaticResource DialogBackgroundColor}\" /> <SolidColorBrush x:Key=\"DialogBorderBrush\" Color=\"{StaticResource AccentColor2}\" /> <!-- Information and Settings Tab controls --> <Color x:Key=\"TabHeaderBackgroundColor\">#232327</Color> <SolidColorBrush x:Key=\"TabHeaderBackgroundBrush\" Color=\"{StaticResource TabHeaderBackgroundColor}\" /> <Color x:Key=\"TabContentBackgroundColor\">#232327</Color> <SolidColorBrush x:Key=\"TabContentBackgroundBrush\" Color=\"{StaticResource TabContentBackgroundColor}\" /> <!-- Main Tab Control background --> <Color x:Key=\"ContentBackgroundColor\">#161618</Color> <SolidColorBrush x:Key=\"ContentBackgroundBrush\" Color=\"{StaticResource ContentBackgroundColor}\" /> <!-- Progress Wheel --> <SolidColorBrush x:Key=\"SpinnerBrush\" Color=\"{StaticResource AccentColor1}\" /> <!-- Disconnect Button --> <Color x:Key=\"DisconnectButtonColor\">#FFD0021B</Color> <SolidColorBrush x:Key=\"DisconnectButtonBrush\" Color=\"{StaticResource DisconnectButtonColor}\" /> <!-- Search Bar --> <Color x:Key=\"SearchBarBackgroundColor\">#212228</Color> <SolidColorBrush x:Key=\"SearchBarBackgroundBrush\" Color=\"{StaticResource SearchBarBackgroundColor}\" /> <!-- ScrollBar --> <SolidColorBrush x:Key=\"ScrollBarUpDownBrush\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ScrollBarThumbBrush\" Color=\"#606060\" /> <SolidColorBrush x:Key=\"ScrollBarBackgroundBrush\" Color=\"#11FFFFFF\" /> <!-- ToggleSwitch control brushes --> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Background\" Color=\"#01FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Background\" Color=\"#01FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Border\" Color=\"{DynamicResource AccentColor2}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Background\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Background\" Color=\"#00FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Border\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Glyph\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Background\" Color=\"#FFCCCCCC\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Border\" Color=\"#FFCCCCCC\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Glyph\" Color=\"#FFA3A3A3\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Background\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Border\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Background\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> There are quite a lot of colors to change but don't get too scared. Nearly every color can be modified to your hearts content to ensure your application color scheme fits with the palette you wish to use for your brand. Image Assets Within the Resources/Icons/ and Resources/Images/ folders, you will find multiple images to replace to make the client look how you wish it to. Keep in mind, it is suggested to keep them the same size unless you intend on modifying the view XAML files to fit everything correctly. Image Description Image Filename An image of the countries on earth done in the style of a dot painting. This shows on the main screen, when a VPN connection is established. (520x263) DottedMap.png An image of the icon used for the system tray icon as well as the logo in the about screen. Ensure this is a multi-dimension (16x16 up to 256x256) .ico file. AppIcon.ico An image of the icon used for the system tray icon, it is visible when the app is connected. Ensure this is a multi-dimension (16x16 up to 256x256) .ico file. AppIconConnected.ico An image of the application splash screen. (300 x 300) SplashScreen.png An image of the logo used on the left side of the Login View. (234 x 49) LoginViewLogo.png An image of the Login View background. (379 x 600) LoginBackground.png A vector version of the icon used on Connected View. ConnectedCheckMark.xaml A vector version of the icon used for Diagnostics tab item. Diagnostics.xaml A vector version of the icon used for General Settings tab item. GeneralSettings.xaml A vector version of the icon used near IP info on Connected View. Globe.xaml A vector version of the icon used for Help tab item. Help.xaml A vector version of the icon used for Main view tab item. Home.xaml A vector version of the icon used for Information tab item. Info.xaml A vector version of the icon used for Licenses tab item. License.xaml A vector version of the icon used near Location info on Connected View. Location.xaml A vector version of the icon used on Login View for password field. Lock.xaml A vector version of the icon used for \"home site\" button that is available post-authentication on all views. Logo.xaml A vector version of the icon used for Logout button. Logout.xaml A vector version of the icon used for Search input. MagnifyingGlass.xaml A vector version of the icon used for Settings tab item. Settings.xaml A vector version of the icon used on Connected View. Shield.xaml A vector version of the icon used for Connection Settings tab item. Signal.xaml A vector version of the icon used for Best Available DataGrid item. Speedometer.xaml A vector version of the icon. Tos.xaml A vector version of the icon used on Login View for username field. User.xaml Resources/Images/Flags directory. The list of available flags. The filename represents 2-letter ISO country name. ad.png, us.png & etc. Library licenses The licenses.rtf file is a compilation of the licenses used for the 3rd party products used in this application. If you leave it as is, it should be fine. If you change the application logic and add any 3rd party libraries, you will need to update this file with the appropriate licenses. Building the Application and making it yours Getting the Code The code is kept in a git repository at https://github.com/wlvpn/ConsumerVPN-Windows/tree/v2 . Clone the repository using your git client of choice on to your local machine. The solution file in the repository is named ConsumerVPN.sln . Using an instance of Visual Studio 2019 running as an administrator , open the ConsumerVPN.sln file to begin. Configuring Visual Studio to use the WLVPN NuGet feed Your account manager will provide you the details required to add the private WLVPN NuGet feed to your instance of Visual Studio. Using the provided details, follow the instructions provided by Microsoft here on how to add an external NuGet repository, this will allow you to use the VpnSDK package as well as others that may be required depending on your requirements. (Note: Do not follow any instructions past the linked paragraph as they are for VSTS configurations.) Changing the Branding You can change all the colors and links used by the application by changing values in the Branding.Colors.xaml and Branding.General.xaml file. Start by changing one of the colors to something glaring and then looking at the application to better understand the relationship between the definitions and where they are used in the application. For instance, changing one of the default accent colors to Orange gives us the following. AccentColor to Orange <Color x:Key=\"AccentColor\">Orange</Color> Another example would be changing the WindowBackgroundColor key to Green. Content Control color to Green <Color x:Key=\"ContentBackgroundColor\">Green</Color> All of these resources can be found in {PROJECT_ROOT}\\src\\App\\Resources\\ . Just as you can easily change the colors or the images by modifying the files in the Branding folder, you can modify all the text strings in the Strings.XX.resx files, where XX is 2-letter ISO country code."
  },
  "articles/cvpn-v2-changelog.html": {
    "href": "articles/cvpn-v2-changelog.html",
    "title": "ConsumerVPN v2 Changelog | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "ConsumerVPN v2 Changelog 11/01/2024 Added toggle in Connection Settings for enabling/disabling threat protection. Updated OpenVPN.Binaries.Scramble nuGet package to version 2.5.3. Updated VpnSDK nuGet package to version 2.2.32. PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/14 07/11/2023 Added a Split Tunneling user interface for easily configuring which apps and domains route outside the VPN tunnel. We now display on the home page the VPN protocol of the current connection, for easy reference. Added Data Uploaded and Data Downloaded stats on the home page once a VPN connection is active. This provides the user with visibility into usage and bandwidth. PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/11 https://github.com/wlvpn/ConsumerVPN-Windows/pull/12 https://github.com/wlvpn/ConsumerVPN-Windows/pull/13 08/08/2023 Added an Automatic option for protocol selection, making it easier to choose a protocol for your VPN connection. Implemented the option to allow or block local network interfaces while connected to a VPN server. Added the option to disable DNS leak protection Included the ability to disable IPV6 leak protection Updated SDK library to 2.2.29 Updated OpenVPN.Binaries.Scramble library to 2.5.1 PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/10 07/02/2023 Added support for WireGuard protocol. Added VPNHostServive library version 1.3.7 Updated SDK library to v2.2.27 Updated OpenVPN.Certificates.WLVPN library to v1.1.0 PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/7 31/08/2022 Removed support for the legacy insecure protocols L2TP, SSTP and PPTP. Updated SDK library to v2.2.26 PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/4 15/07/2019 Updated readme.md Renamed src/ConsumerVPN folder to src/App to make it look more generic. Fixed code signing issues. Improved customization process. Fixed issues with build script. Updated myget repo URL, it is not stackpath anymore. Reworked settings saving. Updated Language change translation. Updated code that is responsible for fixing CLR bug with loading resources. Changed lang version to v7.1. Changed the startup logic so that the second instance check is actually done at startup instead of after the bootstrapper is run. Use bloc instead of loc for datatemplate and styles to prevent memory leaking. Updated SDK library to v2.0.30. PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/1"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "WLVPN VpnSDK .NET Guides | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "WLVPN VpnSDK .NET Guides Provided for you are guides and articles written by the WLVPN team to help you integrate VpnSDK rapidly in to your project and gain a better understanding of all the features provided by VpnSDK."
  },
  "articles/Licenses.html": {
    "href": "articles/Licenses.html",
    "title": "Third Party Licenses | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Third Party Licenses Core.System.Configuration.Install https://github.com/flamencist/Core.System.Configuration.Install Author(s): Alexander Chermyanin The MIT License Copyright (c) 2018 Alexander Chermyanin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. DeviceId https://github.com/MatthewKing/DeviceId Author(s):Matthew King The MIT License (MIT) Copyright (c) 2015-2018 Matthew King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. GeoCoordinate.NetStandard1 https://github.com/AeonLucid/GeoCoordinate.NetStandard1 Author(s): AeonLucid Microsoft Public License (Ms-PL) This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and Non-infringement. UACHelper https://github.com/falahati/UACHelper Author(s):Soroush Falahati The MIT License Copyright (c) 2016 Soroush Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. NewtonSoft.Json http://www.newtonsoft.com/json Author(s):James Newton-King. Copyright (c) 2007 James Newton-King. The MIT License (MIT) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. App-vNext/Polly https://github.com/App-vNext/Polly Author(s):Michael Wolfenden, App vNext New BSD License Copyright (c) 2015-2018, App vNext All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of App vNext nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. RestEase http://github.com/canton7/RestEase Author(s): Antony Male The MIT License (MIT) Copyright (c) 2015-2017 Antony Male Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT Task Scheduler https://github.com/dahall/TaskScheduler Author(s): David Hall MIT License Copyright (c) 2003-2010 David Hall Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. DotRas http://dotras.codeplex.com/ Author(s): Jeff Winn GNU Library General Public License (LGPL) Version 2.1, February 1999 Copyright (C) 1991, 1999 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things. To protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others. Finally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs. When a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library. We call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances. For example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License. In other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system. Although the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library. The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run. TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\". A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables. The \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) \"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful. (For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library. In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices. Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of the Library into a program that is not a library. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange. If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License. However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables. When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.) Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications. You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things: a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.) b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place. e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy. For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above. b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.tomy"
  },
  "articles/migrate.html": {
    "href": "articles/migrate.html",
    "title": "Migrating From VpnSDK v1 to v2 | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Migrating From VpnSDK v1 to v2 Introduction Migrating a codebase using the original VpnSDK release requires updating from the original reactive/observable flow to the standard asynchronous and event patterns found in modern day C#. While reactive code can provide developers with the ability to manage more complex codebases, the new task/event-based model in v2 allows for faster iteration by any C# developer without having to know the in's and out's of reactive programming. [!WARNING] <Customers who have used a branded version of ConsumerVPN with v1 are suggested to follow our branding guide and use ConsumerVPN v2 as a fresh base.> While this guide is not aimed at how to adapt v2 in to a similar interface found in v1, using System.Reactive , developers more comfortable with the reactive programming model can convert the tasks and events in v2 to observable processes. Make sure to read the quick start guide first as it will help show the simplification of the API in v2. The most significant changes that will affect your codebase can be found by comparing the v1 quick start guide to the v2 version . Constructing the SDK Instance [!TIP] <Most namespaces have up from VpnSDK.Public to the root namespace of VpnSDK. Review the API documentation for specifics.> Constructing an instance of the SDK is similar to v1 which uses a builder pattern. SDKBuilder now requires providing the type ISDK as a generic to assist in versioning the main SDK interface. This is as simple as changing new SDKBuilder() to new SDKBuilder<ISDK>() . For applications using IKEv2, RasConfiguration remains the same and for applications using OpenVPN, extraneous diagnostic log file related properties have been removed as all diagnostic logs are now handled through using LibLog to automatically supply log entries to any standard .NET logging framework. Compare the differences between building an SDK instance in ConsumerVPN v1 and v2. // VpnSDK v1 new SDKBuilder() .SetApiKey(Helpers.Resource.Get<string>(\"API_KEY\")) .SetApplicationName(Helpers.Resource.Get<string>(\"BRAND_NAME\")) .SetAuthenticationToken(Helpers.Resource.Get<string>(\"AUTHORIZATION_TOKEN\")) .SetLogFilesPath(logFilesPath) .SetServerListCache(TimeSpan.FromDays(1)) .SetOpenVpnConfiguration(new OpenVpnConfiguration { OpenVpnCertificateFileName = \"ca.crt\", OpenVpnDirectory = \"OpenVPN\", OpenVpnExecutableFileName = \"openvpn.exe\", OpenVpnConfigDirectory = \"OpenVPN\", OpenVpnConfigFileName = \"config.ovpn\", OpenVpnLogFileName = \"openvpn.log\", TapDeviceDescription = \"TAP-Windows Adapter V9\", TapDeviceName = \"tap0901\" }) .SetRasConfiguration(new RasConfiguration { RasDeviceDescription = Resource.Get<string>(\"BRAND_NAME\") }) .Create(); // VpnSDK v2 new SDKBuilder<ISDK>() .SetApiKey(Resource.Get<string>(\"ApiKey\")) .SetAuthenticationToken(Resource.Get<string>(\"AuthenticationToken\")) .SetApplicationName(Resource.Get<string>(\"ApplicationName\")) .SetAutomaticRefreshTokenHandling(true) .SetServerListCache(TimeSpan.FromDays(1)) .Create(); VpnSDK v2 has sane defaults in construction and no longer requires as much specification. ISDK ISDK operations are no longer subscribed to but rather invoked and awaited on. For cases where a task doesn't apply, like an external case of a user being logged out, there are standard C# events that can be subscribed to at any time. All events will be invoked on the same thread that the SDK is created on by default as to provide UI safe events without requiring extra effort from the developer to marshal events between threads. The interface of the main SDK instance has changed significantly as a result and the API reference for the class should be directly reviewed here . For any functionality not covered below, the API reference will have an equivalent event and task using similar patterns as demonstrated. Authentication All authentication and data loading now occurs within the Login(username, password) task. When user authentication fails, an appropriate exception will be fired for the cause of error and this should be expected of all async calls within the SDK. The AuthenticationStatusChanged event can be subscribed to at any time to monitor whether the user has logged in or not and the AuthenticationCredentialsExpired event provides notification on when a users credentials have expired. If you are currently using a callback method in v1 for the login subscription, your exception catch clause for Login and the previous two mentioned events will serve as replacements. Locations (Regions) The RegionsList collection has now been renamed to Locations and changed to a ReadOnlyObservableCollection . Rather than providing a feed of locations that the application needs to keep track of, a standard read-only observable collection is provided to simplify usage as developers were converting this observable in to a collection within their own code which can now be removed. WhenLocationListChanged can be replaced with the Locations.CollectionChanged event. Unlike v1, Locations is automatically populated on login regardless of any subscriptions, so boilerplate code to observe WhenLocationListChanged can be removed. VPN Connectivity The Connect and Disconnect methods still require the same signatures as before but are now tasks. Just like authentication, when either of these operations fail an exception will fire on the awaiter. Upon awaiting both of these methods it's safe to assume the VPN is connected/disconnected. VpnConnectionStatusChanged should be subscribed to make sure that in cases where the VPN tunnel is severed or connecting, the UI is updated without having to share the task's status throughout your UI code. This event should call what was once the .Subscribe callback of .Connect in v1. Diagnostic Logs Logging has changed from being automatically written to a file by the SDK to instead using LibLog to provide logs throughout the SDK to most logging frameworks under the VpnSDK::* namespace. While we suggest using Serilog in your application, most are supported by default. To keep VpnSDK logs separated, use the appropriate namespace filtering option in your logging framework to make anything that starts with VpnSDK:: write to a different file. Conclusion Migrating from the v1 SDK to v2 will require moving away from the existing observable pattern found through v1 and instead use standard async patterns. To speed up your migration, you should ensure to review and compare the v1 and v2 documentation, especially the API reference. All of the example code repositories provide both v1 and v2 branches that serve as an easy way to compare the differences between the two versions and find equivalent code examples rapidly."
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Quick Start | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Quick Start Introduction VpnSDK v2 is a pure async/TPL library that abstracts all WLVPN and VPN connectivity in to an easy to use SDK. In the following code example, the simplicity of getting started is shown through a code example that you can use as a base for a console application. It is suggested that you read through the code and try running it yourself, make your own adjustments along the way to get a good feel for how it works. Getting Started Assuming you have added the NuGet repository provided to you by your account holder, create an empty .NET Console application targeting .NET 4.6.2 at minimum. You will also require a version of Visual Studio that has support for C# 7.1. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version outlines how to select the required C# version. If this isn't possible, you will need to adapt the async Task Main() method to create a method where you can run async operations. In your new project import \"VpnSDK 2. . \" from NuGet and copy the following code. You will need to read through the code and provide your own API keys and authorization tokens. The Code using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Web; using VpnSDK; using VpnSDK.Enums; using VpnSDK.Interfaces; namespace WLVPN.Example { class Program { public static string WLVPN_API_KEY = \"ASK_YOUR_ACCOUNT_MANAGER_FOR_THIS\"; public static string WLVPN_AUTH_TOKEN = \"@ASK_YOUR_ACCOUNT_MANAGER_FOR_THIS\"; public static string WLVPN_USERNAME = \"FAKE\"; public static string WLVPN_PASSWORD = \"FAKE\"; static async Task Main(string[] args) { // Build an SDK instance using the info your account manager has provided. // If you do not have these, please contact WLVPN. ISDK sdk = null; try { sdk = new SDKBuilder<ISDK>().SetApiKey(WLVPN_API_KEY).SetAuthenticationToken(WLVPN_AUTH_TOKEN) .SetApplicationName(\"Console Example\").Create(); } catch(Exception e) { Exit(e.Message); } WriteInfo(\"SDK instance constructed.\"); WriteInfo(\"Ready to authenticate.\"); // Using your WLVPN customer credentials, authenticate against the WLVPN API. try { await sdk.Login(WLVPN_USERNAME, WLVPN_PASSWORD); } catch (Exception e) { Exit($\"Unable to authenticate. {e.Message}\"); } // You can access the users basic info using the User object in the SDK. // You can also get the users current GeoIP information if it is important to your UI/UX. WriteInfo($\"Authenticated user: {sdk.User.VpnCredential.UserName} (Status: {sdk.User.Status.ToString()}) IP: {sdk.CurrentNetworkGeolocation.IPAddress}\"); // All of the SDK locations are now available and exposed through an ObservableCollection. // This acts the same as any other collection except you can get events on when it updates // or use it with popular libraries such as Reactive Extensions or DynamicData. WriteInfo($\"{sdk.Locations.Count} locations detected. Total countries: {sdk.Locations.GroupBy(x => x.CountryCode).Count()} and total cities: {sdk.Locations.GroupBy(x => x.City).Count()}\"); // To connect to these locations, we use the Connect() method in the SDK to establish the connection. // Before we connect though, we need to set up what type of VPN connection the user will use. // Using the RasConnectionConfigurationBuilder which is responsible for IKEv2 connections, we will build an IConnectionConfiguration object // for the Connect method. IConnectionConfiguration rasConfiguration = new RasConnectionConfigurationBuilder() .SetConnectionType(NetworkConnectionType.IKEv2).Build(); // Now that we have a configuration object, we can connect. First let's get an ILocation from our Locations collection. ILocation location = sdk.Locations.First(x => x.Country == \"Canada\"); // As you can see we've picked the first server in Canada that has appeared in the collection. // In a standard application you will want to expose this list for user choice. // As a side note, if you pass a null instead of an ILocation or the 'Best Available' ILocation, the best available server for the user will be chosen. try { WriteInfo($\"Connecting to {location} with {rasConfiguration.ConnectionType}.\"); // Pass the location and configuration to the connect method and await it. If the connection fails, an exception is thrown. await sdk.Connect(location, rasConfiguration); WriteInfo(\"Connection established. Press enter to disconnect.\"); System.Console.ReadLine(); // Now await the disconnection. await sdk.Disconnect(); } catch (Exception e) { // Unfortunately the VPN connection failed, possibly due to invalid credentials or network issues. Exit($\"The VPN connection was unable to be established. Error: {e.Message}\"); } finally { // As a just in case, the finally block is used to make sure the VPN connection is disconnected. if (!sdk.IsDisconnecting) { await sdk.Disconnect(); } } WriteInfo(\"You have authenticated, retrieved a server, connected to it and disconnected with just a few methods.\"); WriteInfo(\"We can't wait to see what you do next.\"); // There are a lot more features available throughout the SDK that do not fit the scope of this quick example. // Please refer to the API documentation, our ExampleApp and ConsumerVPN repositories for real world examples of using the SDK. Exit(); } // This is just a utility method to make logging more simple. static void WriteInfo(string line) { System.Console.WriteLine($\"[Example SDK] {line}\"); } // This is a utility to help write an error message and quit the application. static void Exit(string error = null) { if (!string.IsNullOrEmpty(error)) { WriteInfo($\"Failed to execute operation. {error}\"); } System.Console.WriteLine(\"Press enter to exit...\"); System.Console.ReadLine(); Environment.Exit(0); } } } Conclusion As you can see, the WLVPN SDK has been simplified from previous versions by ensuring you use just the standard .NET Framework library and start building your application rapidly. For more information, consider studying our ExampleApp found at https://github.com/wlvpn/ExampleApp-Windows/tree/v2 or reviewing the API reference. Due to the simplicity in version 2 of the SDK, many barriers have been removed, simple events have replaced observable chaining and going from nothing to a working VPN connection is faster than ever before."
  },
  "articles/sdk-changelog.html": {
    "href": "articles/sdk-changelog.html",
    "title": "VpnSDK Changelog | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "VpnSDK Changelog v2.2.32 Features OpenVPN TAP adapters for Win 10 and above have been updated and are now WHQL certified for improved compatibility and stability. To update the TAP adapters, simply upgrade the OpenVPN.Binaries.Scramble nuGet package to version 2.5.3. Added support to enable threat protection while the VPN connection is active. Domain-based split tunneling can now be operational at the same time as an active kill switch. Added token-based support, allowing users to log in using access and refresh tokens. Added support for adding and fetching account metadata. Added new methods for stopping and uninstalling the split tunnel driver service. Removed the logging of DNS requests unless Debug Mode is enabled. Bug fixes Fixed an issue where some network filters failed to clear correctly following an abrupt SDK termination. Fixed a minor issue when disconnecting the SDK when domain based split tunneling is active. v2.2.31 Features Introduced a new DataTransfer Event, allowing users to retrieve the downloaded and uploaded bytes for a VPN connection. Removed the domain validations from the SplitTunnelDomain class. Now, it's up to the client to provide a valid domain, giving the partner more control over validation. Improved the performance of domain-based split tunneling. Added the ability to set a custom description for the OpenVPN TAP adapter. The Split Tunneling drivers are now WHQL certified for compatibility and stability. Bug fixes Resolved a crash triggered during the loading of our SDK in C++ CLR. v2.2.30 Features Application and Domain-based Split Tunneling: Added support for selectively routing specific applications or domains through the local adapter. v2.2.29 Features Added an Automatic option for protocol selection, making it easier to choose a protocol for your VPN connection. Implemented the option to allow or block local network interfaces while connected to a VPN server. Upgraded OpenVPN to version 2.6.4, ensuring the latest security enhancements and performance improvements are available to our users. Bug fixes Addressed and resolved several bugs to enhance the overall stability and reliability of the SDK. v2.2.28 Bug fixes Fixed Kill switch issues with WireGuard on .NETCore app. v2.2.27 Features Added support for WireGuard protocol. v2.2.26 Features Removed support for the legacy insecure protocols L2TP, SSTP and PPTP. v2.2.25 Bug fixes Fixed OpenVPN's TAP adapter installation issues v2.2.24 Bug fixes Fixed an issue with the locations collection update. Fixed an issue where SDK threw a security exception on initialization when running under non-elevated process. Fixed the RAS connection dispose process. v2.2.20 Features Added IKEv2 fragmentation support for Windows 10 2004+ build. Added .NET Standard 2.0 support. Added a new event LocationsRefreshStatusChanged to ISDK. It returns a RefreshLocationListStatus on ISDK.Locations list update. Added a mechanism to enable TLS 1.2 for Windows 7 if it was disabled. Bug fixes Fixed an issue where servers in maintenance mode were included in the locations list. Fixed an issue with the RAS connection disposing. Fixed an edge case to prevent the NPE when active connections do not exist. Fixed an exception on token refresh. Improved ISDK.Locations collection updates. v2.1.23 Features An update in the WFP library to use a second optional flag for detecting loopback traffic. Loopback improvements: Changed WFP manager to look for interfaces with the loopback type on them as well as looking for 127.0.0.0/8. This should reduce edge cases of loopback traffic incorrectly characterized as normal traffic. Checks to determine if the running process is Elevated. If not Elevated the following features will not be functional: (a) DNS leak protection (b) IPv6 leak protection (c) OpenVPN protocol (d) Connection kill switch Login improvements: Ensures the server list is up to date upon user login. This version of SDK uses the existing server list cache (if it has not expired) at login while an updated list is fired in the background. Previously the server list cache would be used only (a) If the server list API was inaccessible; and (b) If the cache had not expired RefreshServerInfo() allows the server list to explicitly refresh if required. It now has a cool down of 5 minutes. Bug fixes Fix to recreate RAS phonebook entries. This is in the event these entries are deleted v2.0.33 Breaking Changes When the running process is not elevated, setters of the following properties DisableDNSLeakProtection , DisableIPv6LeakProtection , AllowOnlyVPNConnectivity and AllowLANTraffic now throw NotElevatedException , the getter always returns the default value. When the running process is not elevated, OpenVPN protocol is disabled. When the running process is not elevated, InstallTapDriver() now throws NotElevatedException . Features Added IsElevated property to ISDK interface. That property indicates if the running process is elevated or not. v2.0.30 Bug fixes Internal references update. API requests logging improved. Improve RAS event logging Dispose internal logs properly to prevent leaks Improve network filtering. Proper exception throwing on OpenVPN authentication failure. Force adapter metric to be lowered when connected. For RAS type of connections, set a new metric via DotRas, rather than doing interop. v2.0.23 Bug fixes Fixed the issue with reading exitcode of OpenVPN process that is not exited yet. Throw login exceptions correctly. Other stability improvements"
  },
  "index.html": {
    "href": "index.html",
    "title": "VpnSDK v2 .NET Documentation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "VpnSDK v2 .NET Documentation Introduction VpnSDK provides an implementation of the WLVPN service flow (both API and VPN connectivity) through standard .NET TPL/asynchronous patterns. VpnSDK is built for .NET Framework 4.6.1-4.7.2, .NET Standard 2.0 and targets the desktop version of Windows 7 and up. An application built from the SDK can be run from user-space or as an elevated process (Admin). If you run from user-space, you will have limited functionality with the following features not available: OpenVPN protocol DNS Leak Protection IPv6 Leak Protection Allow Only VPN Connectivity (Kill Switch) Allow Lan Traffic If you run as an elevated process, all the features are available. A reference implementation in a GUI application can be found here. Confidentiality The contents of this document cannot be duplicated, copied, reprinted, transferred, distributed, or loaned, in whole or in part, without the prior approval of WLVPN. This document contains confidential and proprietary information of WLVPN, and is protected under confidentiality agreements as well as the intellectual property laws of the United States and of other countries. No part of this document may be released, distributed, transmitted, or reproduced in any form, including by any electronic or mechanical means and by including within information storage and retrieval systems, without written permission from WLVPN."
  }
}