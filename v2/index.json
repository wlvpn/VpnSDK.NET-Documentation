{
  "api/VpnSDK.OAuthException.html": {
    "href": "api/VpnSDK.OAuthException.html",
    "title": "Class OAuthException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OAuthException Exception OAuthException. Fired when SDK is unable to refresh the access token. Inheritance Object BaseSDKException HTTPException OAuthException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class OAuthException : HTTPException Constructors OAuthException(String) Initializes a new instance of the OAuthException class. Declaration public OAuthException(string message) Parameters Type Name Description String message The message to pass to the calling code OAuthException(String, Exception) Initializes a new instance of the OAuthException class. Declaration public OAuthException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also HTTPException APIException"
  },
  "api/VpnSDK.NullLocationException.html": {
    "href": "api/VpnSDK.NullLocationException.html",
    "title": "Class NullLocationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NullLocationException Exception NullLocationException. Fires when a null location is provided to an SDK method. Inheritance Object BaseSDKException VpnException NullLocationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NullLocationException : VpnException Constructors NullLocationException(String) Initializes a new instance of the NullLocationException class. Declaration public NullLocationException(string message) Parameters Type Name Description String message The message to pass to the calling code NullLocationException(String, Exception) Initializes a new instance of the NullLocationException class. Declaration public NullLocationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.NotElevatedException.html": {
    "href": "api/VpnSDK.NotElevatedException.html",
    "title": "Class NotElevatedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NotElevatedException Exception NotElevatedException. Fires when the running process is not elevated. Inheritance Object BaseSDKException CoreException NotElevatedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NotElevatedException : CoreException Constructors NotElevatedException(String) Initializes a new instance of the NotElevatedException class. Declaration public NotElevatedException(string message) Parameters Type Name Description String message The message to pass to the calling code NotElevatedException(String, Exception) Initializes a new instance of the NotElevatedException class. Declaration public NotElevatedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException CoreException"
  },
  "api/VpnSDK.Interfaces.ILocation.html": {
    "href": "api/VpnSDK.Interfaces.ILocation.html",
    "title": "Interface ILocation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface ILocation Interface ILocation. Describes an interface for a generic location. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface ILocation : INotifyPropertyChanged Properties City Gets the city of the location to connect to. This field may be empty on some location objects. Declaration string City { get; } Property Value Type Description String CityCode Gets the city code. Declaration string CityCode { get; } Property Value Type Description String The city code. Country Gets the country of the location to connect to. Declaration string Country { get; } Property Value Type Description String CountryCode Gets the country code. Declaration string CountryCode { get; } Property Value Type Description String The country code. Id Gets the identifier. Declaration string Id { get; } Property Value Type Description String The identifier. PingMs Gets the ping in milliseconds. Declaration ushort? PingMs { get; } Property Value Type Description Nullable < UInt16 > The ping in milliseconds, else null. SearchName Gets the string used for searching. Declaration string SearchName { get; } Property Value Type Description String The name to be used in searches. Methods Ping() Pings this instance. Declaration Task<ushort? > Ping() Returns Type Description Task < Nullable < UInt16 >> Task<System.Nullable<System.UInt16>>."
  },
  "api/VpnSDK.Interfaces.IConnectionInfo.html": {
    "href": "api/VpnSDK.Interfaces.IConnectionInfo.html",
    "title": "Interface IConnectionInfo | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IConnectionInfo Interface IConnectionInfo. Describes the current connection info. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IConnectionInfo Properties Configuration Declaration IConnectionConfiguration Configuration { get; } Property Value Type Description IConnectionConfiguration Location Declaration ILocation Location { get; } Property Value Type Description ILocation Protocol Declaration NetworkConnectionType Protocol { get; } Property Value Type Description NetworkConnectionType"
  },
  "api/VpnSDK.Interfaces.IConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IConnectionConfiguration.html",
    "title": "Interface IConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IConnectionConfiguration Properties ConnectionType Gets the connection type to use. ( OpenVPN, IKEv2, etc. ) Declaration NetworkConnectionType ConnectionType { get; } Property Value Type Description NetworkConnectionType"
  },
  "api/VpnSDK.Interfaces.IBestAvailable.html": {
    "href": "api/VpnSDK.Interfaces.IBestAvailable.html",
    "title": "Interface IBestAvailable | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName ILocation.PingMs ILocation.Country ILocation.City ILocation.Ping() Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IBestAvailable : ILocation, INotifyPropertyChanged Properties BestRegion Gets the best region to be used at connect time. Declaration IRegion BestRegion { get; } Property Value Type Description IRegion The current best region. If null, haversine is used at connect time to determine the best region. See Also ILocation"
  },
  "api/VpnSDK.HTTPException.html": {
    "href": "api/VpnSDK.HTTPException.html",
    "title": "Class HTTPException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class HTTPException Exception HTTPException. Fired as a base exception for any HTTP/S issue such as server failures, reach-ability problems and API request rejections. Inheritance Object BaseSDKException HTTPException APIException AuthenticationException FetchLocationsException NotAuthorizedException OAuthException ServerListException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class HTTPException : BaseSDKException Constructors HTTPException(String) Initializes a new instance of the HTTPException class. Declaration public HTTPException(string message) Parameters Type Name Description String message The message that describes the error. HTTPException(String, Exception) Initializes a new instance of the HTTPException class. Declaration public HTTPException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception."
  },
  "api/VpnSDK.Helpers.html": {
    "href": "api/VpnSDK.Helpers.html",
    "title": "Namespace VpnSDK.Helpers | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Helpers Classes BatchPingUtility Class BatchPingUtility. Provides utilities for batch pinging multiple locations in parallel. VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues."
  },
  "api/VpnSDK.Extensions.RegionLoadChecker.html": {
    "href": "api/VpnSDK.Extensions.RegionLoadChecker.html",
    "title": "Class RegionLoadChecker | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple value. Inheritance Object RegionLoadChecker Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class RegionLoadChecker Methods GetRegionLoadLevel(Nullable<UInt16>) Get from a Region's load level. Declaration public static LoadLevel GetRegionLoadLevel(this ushort? value) Parameters Type Name Description Nullable < UInt16 > value The number value representing the load level. Returns Type Description LoadLevel The appropriate LoadLevel associated with the value."
  },
  "api/VpnSDK.Extensions.LocationExtensions.html": {
    "href": "api/VpnSDK.Extensions.LocationExtensions.html",
    "title": "Class LocationExtensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class LocationExtensions LocationExtensions class. Provides extension methods for locations. Inheritance Object LocationExtensions Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class LocationExtensions Methods Ping(ReadOnlyObservableCollection<ILocation>) Pings all ILocation's in the list. Declaration public static Task Ping(this ReadOnlyObservableCollection<ILocation> list) Parameters Type Name Description ReadOnlyObservableCollection < ILocation > list List of ILocation . Returns Type Description Task A task."
  },
  "api/VpnSDK.Enums.OpenVpnCipherType.html": {
    "href": "api/VpnSDK.Enums.OpenVpnCipherType.html",
    "title": "Enum OpenVpnCipherType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OpenVpnCipherType Fields Name Description AES_128_CBC Advanced Encryption Standard / Rijndael encryption using 128-bit cipher block chaining. AES_256_CBC Advanced Encryption Standard / Rijndael encryption using 256-bit cipher block chaining."
  },
  "api/VpnSDK.Enums.NetworkProtocolType.html": {
    "href": "api/VpnSDK.Enums.NetworkProtocolType.html",
    "title": "Enum NetworkProtocolType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum NetworkProtocolType Fields Name Description TCP Transmission Control Protocol UDP User Datagram Protocol"
  },
  "api/VpnSDK.Enums.LoadLevel.html": {
    "href": "api/VpnSDK.Enums.LoadLevel.html",
    "title": "Enum LoadLevel | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum LoadLevel Fields Name Description High High user load. Invalid Invalid load level. Low Low user load. Medium Normal user load."
  },
  "api/VpnSDK.DTO.OpenVpnConfiguration.html": {
    "href": "api/VpnSDK.DTO.OpenVpnConfiguration.html",
    "title": "Class OpenVpnConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. Inheritance Object OpenVpnConfiguration Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class OpenVpnConfiguration Properties CertificateAuthorityFilePath Gets or sets the file path (absolute or relative) to the Certificate Authority CRT file. Declaration public string CertificateAuthorityFilePath { get; set; } Property Value Type Description String ConfigurationFileOptions Declaration public Dictionary<string, string[]> ConfigurationFileOptions { get; set; } Property Value Type Description Dictionary < String , String []> LogLevel Gets or sets the OpenVPN executable log level. Declaration public OpenVpnLogLevel LogLevel { get; set; } Property Value Type Description OpenVpnLogLevel The OpenVPN executable log level. OpenVpnDirectory Gets or sets the OpenVPN directory. Declaration public string OpenVpnDirectory { get; set; } Property Value Type Description String The OpenVPN directory. OpenVpnExecutableFileName Gets or sets the file name of the OpenVPN executable. Declaration public string OpenVpnExecutableFileName { get; set; } Property Value Type Description String TapDeviceDescription Gets or sets the TAP device description. This refers to the network adapter that OpenVPN uses. Declaration public string TapDeviceDescription { get; set; } Property Value Type Description String The TAP device description."
  },
  "api/VpnSDK.Enums.RefreshLocationListStatus.html": {
    "href": "api/VpnSDK.Enums.RefreshLocationListStatus.html",
    "title": "Enum RefreshLocationListStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum RefreshLocationListStatus Fields Name Description Error The list refresh failed. Refreshed The list refresh is complete. Refreshing The list is being refreshed."
  },
  "api/VpnSDK.Enums.OperationStatus.html": {
    "href": "api/VpnSDK.Enums.OperationStatus.html",
    "title": "Enum OperationStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OperationStatus Enum OperationStatus. Represents the current status of an operation. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OperationStatus Fields Name Description Completed Failed InProgress"
  },
  "api/VpnSDK.Enums.ErrorType.html": {
    "href": "api/VpnSDK.Enums.ErrorType.html",
    "title": "Enum ErrorType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum ErrorType Enum ErrorType. Represents the different types of errors that the SDK can return for localization purposes. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum ErrorType Fields Name Description ApiAuthenticationError An authentication request fails due to invalid credentials or Bad Request. ApiError Authentication request failed due to API issues. ApiFetchLocationsError Failed to refresh locations list. ApiNotAuthorizedError User is not logged in. ApiOAuthError Failed to refresh access token. CoreInvalidConfiguration VpnSDK is not configured correctly. CoreNoAvailableProtocols There's no VPN protocols available on this system. CoreNotElevated The running process is not elevated. None No error. ReconnectOnPowerEventException Failed to reconnect after power event. ServerListError Failed to get Server List. TAPAdapterError TAP Adapter is not installed or not working correctly. Unknown Unknown error type. VpnAlreadyConnected VPN connection is already established. VpnAuthenticationError Failed to authenticate the current user against the selected VPN server. User's credentials are expired? VpnConnectionError VPN connection raised an exception, connection was closed. Happens during connection process. VpnConnectionUnexpectedlyDisconnected VPN connection disconnected unexpectedly. VpnLocationIsNull A null location is provided to an SDK method. VpnUnsupportedProtocolError Failed to create a connection using VPN protocol that is not supported."
  },
  "api/VpnSDK.Enums.AuthenticationStatus.html": {
    "href": "api/VpnSDK.Enums.AuthenticationStatus.html",
    "title": "Enum AuthenticationStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum AuthenticationStatus Fields Name Description Authenticated Authentication has successfully completed and credentials are valid. InProgress Operation in progress. NotAuthenticated The WLVPN API was not reachable or the credentials provided were invalid."
  },
  "api/VpnSDK.BaseSDKException.html": {
    "href": "api/VpnSDK.BaseSDKException.html",
    "title": "Class BaseSDKException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class BaseSDKException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. Inheritance Object BaseSDKException CoreException HTTPException UnknownErrorException VpnException WFPException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public abstract class BaseSDKException : Exception Constructors BaseSDKException(String) Initializes a new instance of the BaseSDKException class. Declaration public BaseSDKException(string message) Parameters Type Name Description String message The message that describes the error. BaseSDKException(String, Exception) Initializes a new instance of the BaseSDKException class. Declaration public BaseSDKException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type Declaration public virtual ErrorType Type { get; } Property Value Type Description ErrorType The error type."
  },
  "api/VpnSDK.DTO.NetworkGeolocation.html": {
    "href": "api/VpnSDK.DTO.NetworkGeolocation.html",
    "title": "Class NetworkGeolocation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NetworkGeolocation Class NetworkGeolocation. Represents a network geolocation determined from a GeoIP service. Inheritance Object NetworkGeolocation Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class NetworkGeolocation Properties City Gets the name of the current city. Declaration public string City { get; } Property Value Type Description String The city. Country Gets the name of the current country. Declaration public string Country { get; } Property Value Type Description String The country. CountryCode Gets the ISO Alpha-2 country code for the current Country . Declaration public string CountryCode { get; } Property Value Type Description String The ISO Alpha-2 country code. IPAddress Gets the current IP address. Declaration public IPAddress IPAddress { get; } Property Value Type Description IPAddress The current IP address. Latitude Gets the latitude. Declaration public decimal Latitude { get; } Property Value Type Description Decimal The latitude. Longitude Gets the longitude. Declaration public decimal Longitude { get; } Property Value Type Description Decimal The longitude. Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Implicit(GeoIP to NetworkGeolocation) Performs an implicit conversion from to NetworkGeolocation . Declaration public static implicit operator NetworkGeolocation(GeoIP geoIp) Parameters Type Name Description GeoIP geoIp The Zorg GeoIP. Returns Type Description NetworkGeolocation The result of the conversion."
  },
  "api/VpnSDK.ConnectionTerminatedException.html": {
    "href": "api/VpnSDK.ConnectionTerminatedException.html",
    "title": "Class ConnectionTerminatedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionTerminatedException Exception ConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. Inheritance Object BaseSDKException VpnException ConnectionTerminatedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionTerminatedException : VpnException Constructors ConnectionTerminatedException(String) Initializes a new instance of the ConnectionTerminatedException class. Declaration public ConnectionTerminatedException(string message) Parameters Type Name Description String message The message to pass to the calling code ConnectionTerminatedException(String, Exception) Initializes a new instance of the ConnectionTerminatedException class. Declaration public ConnectionTerminatedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.ConnectionAlreadyEstablishedException.html": {
    "href": "api/VpnSDK.ConnectionAlreadyEstablishedException.html",
    "title": "Class ConnectionAlreadyEstablishedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionAlreadyEstablishedException Exception ConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. Inheritance Object BaseSDKException VpnException ConnectionAlreadyEstablishedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionAlreadyEstablishedException : VpnException Constructors ConnectionAlreadyEstablishedException(String) Initializes a new instance of the ConnectionAlreadyEstablishedException class. Declaration public ConnectionAlreadyEstablishedException(string message) Parameters Type Name Description String message The message to pass to the calling code ConnectionAlreadyEstablishedException(String, Exception) Initializes a new instance of the ConnectionAlreadyEstablishedException class. Declaration public ConnectionAlreadyEstablishedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException"
  },
  "api/VpnSDK.TapAdapterException.html": {
    "href": "api/VpnSDK.TapAdapterException.html",
    "title": "Class TapAdapterException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class TapAdapterException Exception TapAdapterException. Fired when an OpenVPN TAP adapter is not installed or not working correctly. Inheritance Object BaseSDKException VpnException TapAdapterException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class TapAdapterException : VpnException Constructors TapAdapterException(String) Initializes a new instance of the TapAdapterException class. Declaration public TapAdapterException(string message) Parameters Type Name Description String message The message. TapAdapterException(String, Exception) Initializes a new instance of the TapAdapterException class. Declaration public TapAdapterException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.SDKEventHandler-1.html": {
    "href": "api/VpnSDK.SDKEventHandler-1.html",
    "title": "Delegate SDKEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKEventHandler<T> Delegate SDKEventHandler. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKEventHandler<in T>(ISDK sender, T args); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. T args The event payload. Type Parameters Name Description T The event payload type."
  },
  "api/VpnSDK.SDKChangeEventHandler-1.html": {
    "href": "api/VpnSDK.SDKChangeEventHandler-1.html",
    "title": "Delegate SDKChangeEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKChangeEventHandler<T> Delegate SDKChangeEventHandler. Used when state has changed from previous to current. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKChangeEventHandler<in T>(ISDK sender, T previous, T current); Parameters Type Name Description ISDK sender The SDK instance that has fired the event. T previous The previous state. T current The current state. Type Parameters Name Description T The state type."
  },
  "api/VpnSDK.CoreException.html": {
    "href": "api/VpnSDK.CoreException.html",
    "title": "Class CoreException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class CoreException Inheritance Object BaseSDKException CoreException EmptyAvailableVpnProtocolsException InvalidConfigurationException NotElevatedException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class CoreException : BaseSDKException Constructors CoreException(String) Initializes a new instance of the CoreException class. Declaration public CoreException(string message) Parameters Type Name Description String message The message that describes the error. CoreException(String, Exception) Initializes a new instance of the CoreException class. Declaration public CoreException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception."
  },
  "api/VpnSDK.SDKBuilder-1.html": {
    "href": "api/VpnSDK.SDKBuilder-1.html",
    "title": "Class SDKBuilder<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class SDKBuilder<T> Class SDKBuilder. Used to build an instance of a ISDK . Inheritance Object SDKBuilder<T> Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class SDKBuilder<T> where T : ISDK Type Parameters Name Description T ISDK type. Methods Create() Creates an based off the parameters chained before the call. Declaration public T Create() Returns Type Description T An instance of . SetApiBaseUrl(String[]) Sets the API base URL. Declaration public SDKBuilder<T> SetApiBaseUrl(params string[] value) Parameters Type Name Description String [] value The API base URLs. Returns Type Description SDKBuilder <T> a builder instance. SetApiKey(String) Sets the SDK API key. Declaration public SDKBuilder<T> SetApiKey(string value) Parameters Type Name Description String value the API key. Returns Type Description SDKBuilder <T> a builder instance. SetApplicationName(String) Sets the name of the application. Declaration public SDKBuilder<T> SetApplicationName(string value) Parameters Type Name Description String value The value. Returns Type Description SDKBuilder <T> a builder instance. SetAuthenticationToken(String) Sets the authentication token. Declaration public SDKBuilder<T> SetAuthenticationToken(string value) Parameters Type Name Description String value The value. Returns Type Description SDKBuilder <T> a builder instance. SetAutomaticRefreshTokenHandling(Boolean) Sets the automatic refresh token hanlding. Declaration public SDKBuilder<T> SetAutomaticRefreshTokenHandling(bool automaticallyRefresh) Parameters Type Name Description Boolean automaticallyRefresh If set to true, SDK will automatically update OAuth Refresh Token. Returns Type Description SDKBuilder <T> a builder instance. SetBuildMockup(Boolean) Declaration public SDKBuilder<T> SetBuildMockup(bool value) Parameters Type Name Description Boolean value Returns Type Description SDKBuilder <T> SetOpenVpnConfiguration(OpenVpnConfiguration) Sets the configuration for the Open VPN connection type. Declaration public SDKBuilder<T> SetOpenVpnConfiguration(OpenVpnConfiguration value) Parameters Type Name Description OpenVpnConfiguration value The OpenVPN configuration. Returns Type Description SDKBuilder <T> The current builder instance. SetRasConfiguration(RasConfiguration) Sets the RAS Configuration. Declaration public SDKBuilder<T> SetRasConfiguration(RasConfiguration value) Parameters Type Name Description RasConfiguration value the configuration. Returns Type Description SDKBuilder <T> a builder instance. SetRunInUserspace(Boolean) Sets run in user space mode. This will disable OpenVPN and WFP. Declaration public SDKBuilder<T> SetRunInUserspace(bool runInUserspace) Parameters Type Name Description Boolean runInUserspace True if you want SDK to run in user space. Returns Type Description SDKBuilder <T> a builder instance. SetServerListCache(Nullable<TimeSpan>) Sets the time interval for server list data cache. If not set, SDK wont cache the data. Declaration public SDKBuilder<T> SetServerListCache(TimeSpan? time) Parameters Type Name Description Nullable < TimeSpan > time Time interval. Returns Type Description SDKBuilder <T> a builder instance. SetSynchronizationContext(SynchronizationContext) Sets synchronization context. Declaration public SDKBuilder<T> SetSynchronizationContext(SynchronizationContext context) Parameters Type Name Description SynchronizationContext context . Returns Type Description SDKBuilder <T> a builder instance. SetWireguardConfiguration(WireguardConfiguration) Sets the configuration for the WireGuard® connection type. Declaration public SDKBuilder<T> SetWireguardConfiguration(WireguardConfiguration value) Parameters Type Name Description WireguardConfiguration value The WireGuard® configuration. Returns Type Description SDKBuilder <T> a builder instance. Validate() Validates the configuration before creating the SDK instance. The validation done depends on the type of client. Declaration public void Validate() Exceptions Type Condition InvalidConfigurationException Either the API Key, application name or authentication token were not set. EmptyAvailableVpnProtocolsException No VPN protocols were configured."
  },
  "api/VpnSDK.ReconnectOnPowerEventException.html": {
    "href": "api/VpnSDK.ReconnectOnPowerEventException.html",
    "title": "Class ReconnectOnPowerEventException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ReconnectOnPowerEventException Exception ReconnectOnPowerEventException. Fires when failed to reconnect on power event. Inheritance Object BaseSDKException VpnException ReconnectOnPowerEventException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ReconnectOnPowerEventException : VpnException Constructors ReconnectOnPowerEventException(String) Initializes a new instance of the ReconnectOnPowerEventException class. Declaration public ReconnectOnPowerEventException(string message) Parameters Type Name Description String message The message to pass to the calling code. ReconnectOnPowerEventException(String, Exception) Initializes a new instance of the ReconnectOnPowerEventException class. Declaration public ReconnectOnPowerEventException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner the exception that we are passing up. Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.RasConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.RasConnectionConfigurationBuilder.html",
    "title": "Class RasConnectionConfigurationBuilder | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. Inheritance Object RasConnectionConfigurationBuilder Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class RasConnectionConfigurationBuilder Methods Build() Builds this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetConnectionType(NetworkConnectionType) Sets the type of the connection. Restricted to and . Declaration public RasConnectionConfigurationBuilder SetConnectionType(NetworkConnectionType connectionType) Parameters Type Name Description NetworkConnectionType connectionType Type of the connection. Returns Type Description RasConnectionConfigurationBuilder RasConnectionConfigurationBuilder."
  },
  "api/VpnSDK.NotAuthorizedException.html": {
    "href": "api/VpnSDK.NotAuthorizedException.html",
    "title": "Class NotAuthorizedException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class NotAuthorizedException Exception NotAuthorizedException. Fired when API requests are fired before authenticating a user. Inheritance Object BaseSDKException HTTPException NotAuthorizedException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class NotAuthorizedException : HTTPException Constructors NotAuthorizedException(String) Initializes a new instance of the NotAuthorizedException class. Declaration public NotAuthorizedException(string message) Parameters Type Name Description String message The message to pass to the calling code NotAuthorizedException(String, Exception) Initializes a new instance of the NotAuthorizedException class. Declaration public NotAuthorizedException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.InvalidConfigurationException.html": {
    "href": "api/VpnSDK.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class InvalidConfigurationException Exception InvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. Inheritance Object BaseSDKException CoreException InvalidConfigurationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class InvalidConfigurationException : CoreException Constructors InvalidConfigurationException(String) Initializes a new instance of the InvalidConfigurationException class. Declaration public InvalidConfigurationException(string message) Parameters Type Name Description String message The message to pass to the calling code InvalidConfigurationException(String, Exception) Initializes a new instance of the InvalidConfigurationException class. Declaration public InvalidConfigurationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception"
  },
  "api/VpnSDK.Interfaces.IRasConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IRasConnectionConfiguration.html",
    "title": "Interface IRasConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . Inherited Members IConnectionConfiguration.ConnectionType Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IRasConnectionConfiguration : IConnectionConfiguration See Also IConnectionConfiguration"
  },
  "api/VpnSDK.Interfaces.IOpenVpnConnectionConfiguration.html": {
    "href": "api/VpnSDK.Interfaces.IOpenVpnConnectionConfiguration.html",
    "title": "Interface IOpenVpnConnectionConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. Inherited Members IConnectionConfiguration.ConnectionType Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IOpenVpnConnectionConfiguration : IConnectionConfiguration Properties Cipher Gets or sets the cypher type to use. Declaration OpenVpnCipherType Cipher { get; set; } Property Value Type Description OpenVpnCipherType Port Gets or sets remote port. Declaration ushort Port { get; set; } Property Value Type Description UInt16 ProtocolType Gets or sets the protocol type to use. Declaration NetworkProtocolType ProtocolType { get; set; } Property Value Type Description NetworkProtocolType Scramble Gets or sets a value indicating whether scramble is enabled or not. Declaration bool Scramble { get; set; } Property Value Type Description Boolean See Also IConnectionConfiguration"
  },
  "api/VpnSDK.Extensions.ExceptionExtensions.html": {
    "href": "api/VpnSDK.Extensions.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ExceptionExtensions ExceptionExtensions class. Provides extension methods to help gather exception info. Inheritance Object ExceptionExtensions Namespace : VpnSDK.Extensions Assembly : cs.temp.dll.dll Syntax public static class ExceptionExtensions Methods GetAllExceptionMessages(Exception) Gets all exception messages. Declaration public static IEnumerable<string> GetAllExceptionMessages(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < String > IEnumerable<System.String>. GetAllExceptions(Exception) Gets all inner exceptions. Declaration public static IEnumerable<Exception> GetAllExceptions(this Exception ex) Parameters Type Name Description Exception ex The exception. Returns Type Description IEnumerable < Exception > IEnumerable<Exception>."
  },
  "api/VpnSDK.Enums.html": {
    "href": "api/VpnSDK.Enums.html",
    "title": "Namespace VpnSDK.Enums | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Enums Enums AccountStatus Enum AccountStatus. Refers to what status the account has on the API. Values \"Paid\", \"Expired\", \"Trial\" and \"Free\" should be ignored as they only pertain to specific resellers who have been informed directly about these values. AuthenticationStatus Enum AuthenticationStatus. Describes the status of the user authentication process. ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. DriverInstallResult Enum DriverInstallResult. Describes the result of installing a device driver. ErrorType Enum ErrorType. Represents the different types of errors that the SDK can return for localization purposes. LoadLevel Enum LoadLevel. Represents the current user load level of a region. The lower, the better. NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. NetworkProtocolType Enum NetworkProtocolType. Defines Internet Protocol traffic types. OpenVpnCipherType Enum OpenVpnCipherType. Describes what security ciphers are available to use with OpenVPN. OpenVpnLogLevel Enum OpenVpnLogLevel. Refers to what level of logging OpenVPN should use. OperationStatus Enum OperationStatus. Represents the current status of an operation. RefreshLocationListStatus Enum RefreshLocationListStatus. Describes the status of a server list refresh operation."
  },
  "api/VpnSDK.Enums.AccountStatus.html": {
    "href": "api/VpnSDK.Enums.AccountStatus.html",
    "title": "Enum AccountStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum AccountStatus Enum AccountStatus. Refers to what status the account has on the API. Values \"Paid\", \"Expired\", \"Trial\" and \"Free\" should be ignored as they only pertain to specific resellers who have been informed directly about these values. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum AccountStatus : short Fields Name Description Active The account is currently active and valid. CapReached The account has reached it's data cap. Closed The account has been closed permanently. Expired (Legacy / Unused) The account has expired. Free (Legacy / Unused) The account is a free account. Paid (Legacy / Unused) The account has been paid for. Paused The account has been paused. Pending The account is currently pending setup. Suspended The account has been suspended temporarily. Trial (Legacy / Unused) The account is on a trial. Unknown The account status is unknown."
  },
  "api/VpnSDK.DTO.html": {
    "href": "api/VpnSDK.DTO.html",
    "title": "Namespace VpnSDK.DTO | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.DTO Classes NetworkGeolocation Class NetworkGeolocation. Represents a network geolocation determined from a GeoIP service. OpenVpnConfiguration Class OpenVpnConfiguration. Describes the OpenVPN application configuration for the application. RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 / SSTP ) VPN connections."
  },
  "api/VpnSDK.ConnectionException.html": {
    "href": "api/VpnSDK.ConnectionException.html",
    "title": "Class ConnectionException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ConnectionException Exception ConnectionException. Fires when a VPN connection has failed. Inheritance Object BaseSDKException VpnException ConnectionException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ConnectionException : VpnException Constructors ConnectionException(String) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string message) Parameters Type Name Description String message The message to pass to the calling code ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.EmptyAvailableVpnProtocolsException.html": {
    "href": "api/VpnSDK.EmptyAvailableVpnProtocolsException.html",
    "title": "Class EmptyAvailableVpnProtocolsException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class EmptyAvailableVpnProtocolsException Exception EmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. Inheritance Object BaseSDKException CoreException EmptyAvailableVpnProtocolsException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class EmptyAvailableVpnProtocolsException : CoreException Constructors EmptyAvailableVpnProtocolsException(String) Initializes a new instance of the EmptyAvailableVpnProtocolsException class. Declaration public EmptyAvailableVpnProtocolsException(string message) Parameters Type Name Description String message The message to pass to the calling code EmptyAvailableVpnProtocolsException(String, Exception) Initializes a new instance of the EmptyAvailableVpnProtocolsException class. Declaration public EmptyAvailableVpnProtocolsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException CoreException"
  },
  "api/VpnSDK.DTO.RasConfiguration.html": {
    "href": "api/VpnSDK.DTO.RasConfiguration.html",
    "title": "Class RasConfiguration | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class RasConfiguration Class RasConfiguration. Describes the RAS configuration used for RAS-based ( IKEv2 / SSTP ) VPN connections. Inheritance Object RasConfiguration Namespace : VpnSDK.DTO Assembly : cs.temp.dll.dll Syntax public class RasConfiguration Properties RasDeviceDescription Gets or sets the device description used by Windows. Declaration public string RasDeviceDescription { get; set; } Property Value Type Description String UseConnectionTypeInName Gets or sets a value indicating whether to use the connection type in the VPN entry. Declaration public bool UseConnectionTypeInName { get; set; } Property Value Type Description Boolean true if using the connection type in VPN entry, otherwise, false ."
  },
  "api/VpnSDK.Interfaces.html": {
    "href": "api/VpnSDK.Interfaces.html",
    "title": "Namespace VpnSDK.Interfaces | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Interfaces Interfaces IBestAvailable Interface IBestAvailable. Tagging interface that describes a special ILocation that always finds the 'best available' location for the user. IConnectionConfiguration Interface IConnectionConfiguration. Provides an interface for a connection configuration. IConnectionInfo Interface IConnectionInfo. Describes the current connection info. ILocation Interface ILocation. Describes an interface for a generic location. IOpenVpnConnectionConfiguration Interface IOpenVpnConnectionConfiguration. Provides an interface that contains OpenVPN specific options. IRasConnectionConfiguration Interface IRasConnectionConfiguration. Tagging interface for RAS-based IConnectionConfiguration . IRegion Interface IRegion. Describes a region as an ILocation . ISDK Interface ISDK. Provides an interface for the SDK APIs. IUser Interface IUser. Provides an interface for API users/customers."
  },
  "api/VpnSDK.Interfaces.IUser.html": {
    "href": "api/VpnSDK.Interfaces.IUser.html",
    "title": "Interface IUser | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IUser Interface IUser. Provides an interface for API users/customers. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IUser : INotifyPropertyChanged Properties EmailAddress Gets the email address provided by the API. This will be set to null if third-party authentication is used. Declaration string EmailAddress { get; } Property Value Type Description String The email address. IsValid Gets a value indicating whether returns true if the user object is valid. Declaration bool IsValid { get; } Property Value Type Description Boolean true if this instance is valid; otherwise, false . Status Gets the current account status. Declaration AccountStatus Status { get; } Property Value Type Description AccountStatus The status. SubscriptionExpiry Gets the subscription expiry date if known. Declaration DateTime? SubscriptionExpiry { get; } Property Value Type Description Nullable < DateTime > The subscription expiry. VpnCredential Gets the VPN server credential. Declaration NetworkCredential VpnCredential { get; } Property Value Type Description NetworkCredential The VPN credential."
  },
  "api/VpnSDK.Interfaces.ISDK.html": {
    "href": "api/VpnSDK.Interfaces.ISDK.html",
    "title": "Interface ISDK | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface ISDK Interface ISDK. Provides an interface for the SDK APIs. Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface ISDK : INotifyPropertyChanged, IDisposable Properties ActiveConnectionInformation Gets the active connection information. Declaration IConnectionInfo ActiveConnectionInformation { get; } Property Value Type Description IConnectionInfo The active connection information, null if not connected. AllowLANTraffic Gets or sets a value indicating whether to allow LAN traffic even when AllowOnlyVPNConnectivity is enabled. Declaration bool AllowLANTraffic { get; set; } Property Value Type Description Boolean true if [allow LAN traffic]; otherwise, false . Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. AllowOnlyVPNConnectivity Gets or sets a value indicating whether to allow only VPN connectivity and block standard Internet connections. Declaration bool AllowOnlyVPNConnectivity { get; set; } Property Value Type Description Boolean true if [allow only VPN connectivity]; otherwise, false . Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. AvailableProtocols Gets the available VPN types. Declaration Dictionary<NetworkConnectionType, bool> AvailableProtocols { get; } Property Value Type Description Dictionary < NetworkConnectionType , Boolean > A dictionary where the key is what protocol and the value is whether it's available. CurrentNetworkGeolocation Gets the current network geolocation. Declaration NetworkGeolocation CurrentNetworkGeolocation { get; } Property Value Type Description NetworkGeolocation The current network geolocation when established, else null . DisableDNSLeakProtection Gets or sets a value indicating whether to disable DNS leak protection. Declaration bool DisableDNSLeakProtection { get; set; } Property Value Type Description Boolean true if DNS leak protection is disabled otherwise, false . Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. DisableIPv6LeakProtection Gets or sets a value indicating whether to disable IPv6 leak protection. Declaration bool DisableIPv6LeakProtection { get; set; } Property Value Type Description Boolean true if IPv6 leak protection is disabled otherwise, false . Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. IsConnected Gets a value indicating whether VPN connection established. Declaration bool IsConnected { get; } Property Value Type Description Boolean IsConnecting Gets a value indicating whether SDK is in the process of establishing a new connection. Declaration bool IsConnecting { get; } Property Value Type Description Boolean IsConnectionCancelled Gets a value indicating whether VPN connection process was cancelled. Declaration bool IsConnectionCancelled { get; } Property Value Type Description Boolean IsDisconnecting Gets a value indicating whether SDK is disconnecting from VPN server. Declaration bool IsDisconnecting { get; } Property Value Type Description Boolean IsDisposed Gets a value indicating whether object is disposed. Declaration bool IsDisposed { get; } Property Value Type Description Boolean IsElevated Gets a value indicating whether the running process is elevated. Declaration bool IsElevated { get; } Property Value Type Description Boolean Locations Gets the read only observable collection responsible for locations. Declaration ReadOnlyObservableCollection<ILocation> Locations { get; } Property Value Type Description ReadOnlyObservableCollection < ILocation > The locations. TapDriverInstalled Gets a value indicating whether TAP driver installed. Declaration bool TapDriverInstalled { get; } Property Value Type Description Boolean User Gets the user which was logged in. This property is null if user was not authorized. Declaration IUser User { get; } Property Value Type Description IUser Methods Connect(IEnumerable<ILocation>, IConnectionConfiguration, CancellationToken) Connects the user to the best VPN location in an enumerable using the specified configuration. Declaration Task Connect(IEnumerable<ILocation> locations, IConnectionConfiguration connectionConfiguration, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable < ILocation > locations The target locations. IConnectionConfiguration connectionConfiguration The protocol configuration parameters for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Exceptions Type Condition UnsupportedProtocolException ConnectionType is not supported. VPNAuthenticationException VPN server rejected credentials. HTTPException User account became invalidated. VPNAuthenticationException VPN authorization failed. Please try connecting to a different location. Connect(ILocation, IConnectionConfiguration, CancellationToken) Connects the user to the VPN location specified using the specified configuration Declaration Task Connect(ILocation location, IConnectionConfiguration connectionConfiguration, CancellationToken cancellationToken = null) Parameters Type Name Description ILocation location The target location. IConnectionConfiguration connectionConfiguration The protocol configuration parameters for the connection. CancellationToken cancellationToken The cancellation token responsible for canceling the connection. Returns Type Description Task A Task . Disconnect() Disconnects the user from the active VPN connection. Declaration Task Disconnect() Returns Type Description Task A Task . InstallTapDriver() Installs the OpenVPN TAP driver. Removes existing TAP drivers if already installed. Declaration Task<DriverInstallResult> InstallTapDriver() Returns Type Description Task < DriverInstallResult > Task<DriverInstallResult>. Exceptions Type Condition NotElevatedException Thrown when the running process is not elevated. UnsupportedProtocolException Thrown when OpenVPN protocol is not available. NotElevatedException This feature only works when the running process is elevated. UnsupportedProtocolException SDK is configured for running user space only. TAP Driver cannot be set up from user space. UnsupportedProtocolException OpenVPN is not available. Login(String, String) Logs the specified username and password against the WLVPN API. Declaration Task Login(string username, string password) Parameters Type Name Description String username The username. String password The password. Returns Type Description Task A Task . Exceptions Type Condition HTTPException Connection already in progress. ServerListException Failed to retrieve server list. Logout() Logs out the current user. Declaration Task Logout() Returns Type Description Task A Task . RefreshServerInfo() Refreshes the server info manually. Declaration Task RefreshServerInfo() Returns Type Description Task A Task . Exceptions Type Condition NotAuthorizedException No user logged in to refresh server info. RefreshUserToken() Refreshes the user token manually. Declaration Task RefreshUserToken() Returns Type Description Task A Task . Exceptions Type Condition NotAuthorizedException No user logged in to refresh. HTTPException User account became invalidated. Events AuthenticationCredentialsExpired Fires when a users authentication credentials have expired. Declaration event SDKEventHandler AuthenticationCredentialsExpired Event Type Type Description SDKEventHandler AuthenticationStatusChanged Fires when the authentication status of the active SDK user changes. Declaration event SDKEventHandler<AuthenticationStatus> AuthenticationStatusChanged Event Type Type Description SDKEventHandler < AuthenticationStatus > TapDeviceInstallationStatusChanged Occurs when the TAP device installation status changed. Declaration event SDKOperationEventHandler TapDeviceInstallationStatusChanged Event Type Type Description SDKOperationEventHandler UserLocationStatusChanged User location changed event. Declaration event SDKOperationEventHandler<NetworkGeolocation> UserLocationStatusChanged Event Type Type Description SDKOperationEventHandler < NetworkGeolocation > VpnConnectionStatusChanged Fires when the active VPN connection status changes. Provides what the status was previously and what it is now. Declaration event SDKChangeEventHandler<ConnectionStatus> VpnConnectionStatusChanged Event Type Type Description SDKChangeEventHandler < ConnectionStatus > Remarks When using this event, make sure to check if the before was Connected and the after is Disconnected. If this is the case, the VPN connection was unexpectedly disconnected for an unknown reason. Ensure to notify the user that this happened or automatically reconnect for them depending on your use case."
  },
  "api/VpnSDK.Interfaces.IRegion.html": {
    "href": "api/VpnSDK.Interfaces.IRegion.html",
    "title": "Interface IRegion | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Interface IRegion Interface IRegion. Describes a region as an ILocation . Inherited Members ILocation.Id ILocation.CountryCode ILocation.CityCode ILocation.SearchName ILocation.PingMs ILocation.Country ILocation.City ILocation.Ping() Namespace : VpnSDK.Interfaces Assembly : cs.temp.dll.dll Syntax public interface IRegion : ILocation, INotifyPropertyChanged Properties GeoCoordinate Gets the geo coordinate that presents the region on a map. Declaration GeoCoordinate GeoCoordinate { get; } Property Value Type Description GeoCoordinate The current IRegion 's geo coordinate. Load Gets the user load of the region. Higher values mean that the server is nearing capacity. Declaration ushort? Load { get; } Property Value Type Description Nullable < UInt16 > The current user load between 0% to 100% as a flattened value. Methods PingAll() Pings all children of this instance. Declaration Task<ushort? > PingAll() Returns Type Description Task < Nullable < UInt16 >> Task<System.Nullable<System.UInt16>>, where UInt16 is an average ping value for all children. See Also ILocation"
  },
  "api/VpnSDK.Helpers.VpnProtocolDiagnostics.html": {
    "href": "api/VpnSDK.Helpers.VpnProtocolDiagnostics.html",
    "title": "Class VpnProtocolDiagnostics | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VpnProtocolDiagnostics Class VpnProtocolDiagnostics. Provides utilities for diagnosing VPN protocol issues. Inheritance Object VpnProtocolDiagnostics Namespace : VpnSDK.Helpers Assembly : cs.temp.dll.dll Syntax public class VpnProtocolDiagnostics Methods DiagnoseProtocolsAvailability(OpenVpnConfiguration, RasConfiguration, WireguardConfiguration, Dictionary<NetworkConnectionType, Boolean>) Diagnoses the protocols availability. Declaration public static void DiagnoseProtocolsAvailability(OpenVpnConfiguration openVpnConfiguration, RasConfiguration rasConfiguration, WireguardConfiguration wireguardConfiguration, Dictionary<NetworkConnectionType, bool> availableProtocols) Parameters Type Name Description OpenVpnConfiguration openVpnConfiguration The Open VPN configuration. RasConfiguration rasConfiguration The RAS configuration. WireguardConfiguration wireguardConfiguration The WireGuard® configuration. Dictionary < NetworkConnectionType , Boolean > availableProtocols The available protocols."
  },
  "api/VpnSDK.Helpers.BatchPingUtility.html": {
    "href": "api/VpnSDK.Helpers.BatchPingUtility.html",
    "title": "Class BatchPingUtility | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class BatchPingUtility Class BatchPingUtility. Provides utilities for batch pinging multiple locations in parallel. Inheritance Object BatchPingUtility Namespace : VpnSDK.Helpers Assembly : cs.temp.dll.dll Syntax public static class BatchPingUtility Methods Ping(ILocation[]) Pings all locations in parallel. Declaration public static Task Ping(params ILocation[] locations) Parameters Type Name Description ILocation [] locations Locations to ping. Returns Type Description Task Task."
  },
  "articles/sdk-changelog.html": {
    "href": "articles/sdk-changelog.html",
    "title": "VpnSDK Changelog | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "VpnSDK Changelog v2.0.33 Breaking Changes When the running process is not elevated, setters of the following properties DisableDNSLeakProtection , DisableIPv6LeakProtection , AllowOnlyVPNConnectivity and AllowLANTraffic now throw NotElevatedException , the getter always returns the default value. When the running process is not elevated, OpenVPN protocol is disabled. When the running process is not elevated, InstallTapDriver() now throws NotElevatedException . Features Added IsElevated property to ISDK interface. That property indicates if the running process is elevated or not. v2.0.30 Bug fixes Internal references update. API requests logging improved. Improve RAS event logging Dispose internal logs properly to prevent leaks Improve network filtering. Proper exception throwing on OpenVPN authentication failure. Force adapter metric to be lowered when connected. For RAS type of connections, set a new metric via DotRas, rather than doing interop. v2.0.23 Bug fixes Fixed the issue with reading exitcode of OpenVPN process that is not exited yet. Throw login exceptions correctly. Other stability improvements"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Quick Start | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Quick Start Introduction VpnSDK v2 is a pure async/TPL library that abstracts all WLVPN and VPN connectivity in to an easy to use SDK. In the following code example, the simplicity of getting started is shown through a code example that you can use as a base for a console application. It is suggested that you read through the code and try running it yourself, make your own adjustments along the way to get a good feel for how it works. Getting Started Assuming you have added the NuGet repository provided to you by your account holder, create an empty .NET Console application targeting .NET 4.6.2 at minimum. You will also require a version of Visual Studio that has support for C# 7.1. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version outlines how to select the required C# version. If this isn't possible, you will need to adapt the async Task Main() method to create a method where you can run async operations. In your new project import \"VpnSDK 2. . \" from NuGet and copy the following code. You will need to read through the code and provide your own API keys and authorization tokens. The Code using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Web; using VpnSDK; using VpnSDK.Enums; using VpnSDK.Interfaces; namespace WLVPN.Example { class Program { public static string WLVPN_API_KEY = \"ASK_YOUR_ACCOUNT_MANAGER_FOR_THIS\"; public static string WLVPN_AUTH_TOKEN = \"@ASK_YOUR_ACCOUNT_MANAGER_FOR_THIS\"; public static string WLVPN_USERNAME = \"FAKE\"; public static string WLVPN_PASSWORD = \"FAKE\"; static async Task Main(string[] args) { // Build an SDK instance using the info your account manager has provided. // If you do not have these, please contact WLVPN. ISDK sdk = null; try { sdk = new SDKBuilder<ISDK>().SetApiKey(WLVPN_API_KEY).SetAuthenticationToken(WLVPN_AUTH_TOKEN) .SetApplicationName(\"Console Example\").Create(); } catch(Exception e) { Exit(e.Message); } WriteInfo(\"SDK instance constructed.\"); WriteInfo(\"Ready to authenticate.\"); // Using your WLVPN customer credentials, authenticate against the WLVPN API. try { await sdk.Login(WLVPN_USERNAME, WLVPN_PASSWORD); } catch (Exception e) { Exit($\"Unable to authenticate. {e.Message}\"); } // You can access the users basic info using the User object in the SDK. // You can also get the users current GeoIP information if it is important to your UI/UX. WriteInfo($\"Authenticated user: {sdk.User.VpnCredential.UserName} (Status: {sdk.User.Status.ToString()}) IP: {sdk.CurrentNetworkGeolocation.IPAddress}\"); // All of the SDK locations are now available and exposed through an ObservableCollection. // This acts the same as any other collection except you can get events on when it updates // or use it with popular libraries such as Reactive Extensions or DynamicData. WriteInfo($\"{sdk.Locations.Count} locations detected. Total countries: {sdk.Locations.GroupBy(x => x.CountryCode).Count()} and total cities: {sdk.Locations.GroupBy(x => x.City).Count()}\"); // To connect to these locations, we use the Connect() method in the SDK to establish the connection. // Before we connect though, we need to set up what type of VPN connection the user will use. // Using the RasConnectionConfigurationBuilder which is responsible for IKEv2 connections, we will build an IConnectionConfiguration object // for the Connect method. IConnectionConfiguration rasConfiguration = new RasConnectionConfigurationBuilder() .SetConnectionType(NetworkConnectionType.IKEv2).Build(); // Now that we have a configuration object, we can connect. First let's get an ILocation from our Locations collection. ILocation location = sdk.Locations.First(x => x.Country == \"Canada\"); // As you can see we've picked the first server in Canada that has appeared in the collection. // In a standard application you will want to expose this list for user choice. // As a side note, if you pass a null instead of an ILocation or the 'Best Available' ILocation, the best available server for the user will be chosen. try { WriteInfo($\"Connecting to {location} with {rasConfiguration.ConnectionType}.\"); // Pass the location and configuration to the connect method and await it. If the connection fails, an exception is thrown. await sdk.Connect(location, rasConfiguration); WriteInfo(\"Connection established. Press enter to disconnect.\"); System.Console.ReadLine(); // Now await the disconnection. await sdk.Disconnect(); } catch (Exception e) { // Unfortunately the VPN connection failed, possibly due to invalid credentials or network issues. Exit($\"The VPN connection was unable to be established. Error: {e.Message}\"); } finally { // As a just in case, the finally block is used to make sure the VPN connection is disconnected. if (!sdk.IsDisconnecting) { await sdk.Disconnect(); } } WriteInfo(\"You have authenticated, retrieved a server, connected to it and disconnected with just a few methods.\"); WriteInfo(\"We can't wait to see what you do next.\"); // There are a lot more features available throughout the SDK that do not fit the scope of this quick example. // Please refer to the API documentation, our ExampleApp and ConsumerVPN repositories for real world examples of using the SDK. Exit(); } // This is just a utility method to make logging more simple. static void WriteInfo(string line) { System.Console.WriteLine($\"[Example SDK] {line}\"); } // This is a utility to help write an error message and quit the application. static void Exit(string error = null) { if (!string.IsNullOrEmpty(error)) { WriteInfo($\"Failed to execute operation. {error}\"); } System.Console.WriteLine(\"Press enter to exit...\"); System.Console.ReadLine(); Environment.Exit(0); } } } Conclusion As you can see, the WLVPN SDK has been simplified from previous versions by ensuring you use just the standard .NET Framework library and start building your application rapidly. For more information, consider studying our ExampleApp found at https://github.com/wlvpn/ExampleApp-Windows/tree/v2 or reviewing the API reference. Due to the simplicity in version 2 of the SDK, many barriers have been removed, simple events have replaced observable chaining and going from nothing to a working VPN connection is faster than ever before."
  },
  "articles/migrate.html": {
    "href": "articles/migrate.html",
    "title": "Migrating From VpnSDK v1 to v2 | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Migrating From VpnSDK v1 to v2 Introduction Migrating a codebase using the original VpnSDK release requires updating from the original reactive/observable flow to the standard asynchronous and event patterns found in modern day C#. While reactive code can provide developers with the ability to manage more complex codebases, the new task/event-based model in v2 allows for faster iteration by any C# developer without having to know the in's and out's of reactive programming. [!WARNING] <Customers who have used a branded version of ConsumerVPN with v1 are suggested to follow our branding guide and use ConsumerVPN v2 as a fresh base.> While this guide is not aimed at how to adapt v2 in to a similar interface found in v1, using System.Reactive , developers more comfortable with the reactive programming model can convert the tasks and events in v2 to observable processes. Make sure to read the quick start guide first as it will help show the simplification of the API in v2. The most significant changes that will affect your codebase can be found by comparing the v1 quick start guide to the v2 version . Constructing the SDK Instance [!TIP] <Most namespaces have up from VpnSDK.Public to the root namespace of VpnSDK. Review the API documentation for specifics.> Constructing an instance of the SDK is similar to v1 which uses a builder pattern. SDKBuilder now requires providing the type ISDK as a generic to assist in versioning the main SDK interface. This is as simple as changing new SDKBuilder() to new SDKBuilder<ISDK>() . For applications using IKEv2, RasConfiguration remains the same and for applications using OpenVPN, extraneous diagnostic log file related properties have been removed as all diagnostic logs are now handled through using LibLog to automatically supply log entries to any standard .NET logging framework. Compare the differences between building an SDK instance in ConsumerVPN v1 and v2. // VpnSDK v1 new SDKBuilder() .SetApiKey(Helpers.Resource.Get<string>(\"API_KEY\")) .SetApplicationName(Helpers.Resource.Get<string>(\"BRAND_NAME\")) .SetAuthenticationToken(Helpers.Resource.Get<string>(\"AUTHORIZATION_TOKEN\")) .SetLogFilesPath(logFilesPath) .SetServerListCache(TimeSpan.FromDays(1)) .SetOpenVpnConfiguration(new OpenVpnConfiguration { OpenVpnCertificateFileName = \"ca.crt\", OpenVpnDirectory = \"OpenVPN\", OpenVpnExecutableFileName = \"openvpn.exe\", OpenVpnConfigDirectory = \"OpenVPN\", OpenVpnConfigFileName = \"config.ovpn\", OpenVpnLogFileName = \"openvpn.log\", TapDeviceDescription = \"TAP-Windows Adapter V9\", TapDeviceName = \"tap0901\" }) .SetRasConfiguration(new RasConfiguration { RasDeviceDescription = Resource.Get<string>(\"BRAND_NAME\") }) .Create(); // VpnSDK v2 new SDKBuilder<ISDK>() .SetApiKey(Resource.Get<string>(\"ApiKey\")) .SetAuthenticationToken(Resource.Get<string>(\"AuthenticationToken\")) .SetApplicationName(Resource.Get<string>(\"ApplicationName\")) .SetAutomaticRefreshTokenHandling(true) .SetServerListCache(TimeSpan.FromDays(1)) .Create(); VpnSDK v2 has sane defaults in construction and no longer requires as much specification. ISDK ISDK operations are no longer subscribed to but rather invoked and awaited on. For cases where a task doesn't apply, like an external case of a user being logged out, there are standard C# events that can be subscribed to at any time. All events will be invoked on the same thread that the SDK is created on by default as to provide UI safe events without requiring extra effort from the developer to marshal events between threads. The interface of the main SDK instance has changed significantly as a result and the API reference for the class should be directly reviewed here . For any functionality not covered below, the API reference will have an equivalent event and task using similar patterns as demonstrated. Authentication All authentication and data loading now occurs within the Login(username, password) task. When user authentication fails, an appropriate exception will be fired for the cause of error and this should be expected of all async calls within the SDK. The AuthenticationStatusChanged event can be subscribed to at any time to monitor whether the user has logged in or not and the AuthenticationCredentialsExpired event provides notification on when a users credentials have expired. If you are currently using a callback method in v1 for the login subscription, your exception catch clause for Login and the previous two mentioned events will serve as replacements. Locations (Regions) The RegionsList collection has now been renamed to Locations and changed to a ReadOnlyObservableCollection . Rather than providing a feed of locations that the application needs to keep track of, a standard read-only observable collection is provided to simplify usage as developers were converting this observable in to a collection within their own code which can now be removed. WhenLocationListChanged can be replaced with the Locations.CollectionChanged event. Unlike v1, Locations is automatically populated on login regardless of any subscriptions, so boilerplate code to observe WhenLocationListChanged can be removed. VPN Connectivity The Connect and Disconnect methods still require the same signatures as before but are now tasks. Just like authentication, when either of these operations fail an exception will fire on the awaiter. Upon awaiting both of these methods it's safe to assume the VPN is connected/disconnected. VpnConnectionStatusChanged should be subscribed to make sure that in cases where the VPN tunnel is severed or connecting, the UI is updated without having to share the task's status throughout your UI code. This event should call what was once the .Subscribe callback of .Connect in v1. Diagnostic Logs Logging has changed from being automatically written to a file by the SDK to instead using LibLog to provide logs throughout the SDK to most logging frameworks under the VpnSDK::* namespace. While we suggest using Serilog in your application, most are supported by default. To keep VpnSDK logs separated, use the appropriate namespace filtering option in your logging framework to make anything that starts with VpnSDK:: write to a different file. Conclusion Migrating from the v1 SDK to v2 will require moving away from the existing observable pattern found through v1 and instead use standard async patterns. To speed up your migration, you should ensure to review and compare the v1 and v2 documentation, especially the API reference. All of the example code repositories provide both v1 and v2 branches that serve as an easy way to compare the differences between the two versions and find equivalent code examples rapidly."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "WLVPN VpnSDK .NET Guides | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "WLVPN VpnSDK .NET Guides Provided for you are guides and articles written by the WLVPN team to help you integrate VpnSDK rapidly in to your project and gain a better understanding of all the features provided by VpnSDK."
  },
  "index.html": {
    "href": "index.html",
    "title": "VpnSDK v2 .NET Documentation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "VpnSDK v2 .NET Documentation Introduction VpnSDK provides an implementation of the WLVPN service flow (both API and VPN connectivity) through standard .NET TPL/asynchronous patterns. VpnSDK is built for .NET Framework 4.6.1-4.7.2 and targets the desktop version of Windows 7 and up. An application built from the SDK can be run from user-space or as an elevated process (Admin). If you run from user-space, you will have limited functionality with the following features not available: OpenVPN protocol DNS Leak Protection IPv6 Leak Protection Allow Only VPN Connectivity (Kill Switch) Allow Lan Traffic If you run as an elevated process, all the features are available. A reference implementation in a GUI application can be found here. Confidentiality The contents of this document cannot be duplicated, copied, reprinted, transferred, distributed, or loaned, in whole or in part, without the prior approval of WLVPN. This document contains confidential and proprietary information of WLVPN, and is protected under confidentiality agreements as well as the intellectual property laws of the United States and of other countries. No part of this document may be released, distributed, transmitted, or reproduced in any form, including by any electronic or mechanical means and by including within information storage and retrieval systems, without written permission from WLVPN."
  },
  "articles/cvpn-v2-changelog.html": {
    "href": "articles/cvpn-v2-changelog.html",
    "title": "ConsumerVPN v2 Changelog | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "ConsumerVPN v2 Changelog 15/07/2019 Updated readme.md Renamed src/ConsumerVPN folder to src/App to make it look more generic. Fixed code signing issues. Improved customization process. Fixed issues with build script. Updated myget repo URL, it is not stackpath anymore. Reworked settings saving. Updated Language change translation. Updated code that is responsible for fixing CLR bug with loading resources. Changed lang version to v7.1. Changed the startup logic so that the second instance check is actually done at startup instead of after the bootstrapper is run. Use bloc instead of loc for datatemplate and styles to prevent memory leaking. Updated SDK library to v2.0.30. PR reference: https://github.com/wlvpn/ConsumerVPN-Windows/pull/1"
  },
  "articles/branding.html": {
    "href": "articles/branding.html",
    "title": "Branding ConsumerVPN | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Branding ConsumerVPN Provided to you is a copy of the example ConsumerVPN v2 client, a base application that can be easily modified to work with your design. Architected to be simple to iterate on, for most WLVPN partners, you will find yourself using it as a launching point. Requirements You will need to become a registered WLVPN reseller to run the application. If you have not done so already, please visit https://wlvpn.com/#contact to get started. To create your own application from this template, you will need a copy of Visual Studio 2017 or 2019 (preferred). This can be obtained from here: https://www.visualstudio.com/vs/ Once Visual Studio has been installed, you will need to clone or download the repository for the ConsumerVPN application found at https://github.com/wlvpn/ConsumerVPN-v2-Windows . Make sure to checkout the v2 branch. Once downloaded an extracted, open the ConsumerVPN.sln file in the extracted folder. The application is a Microsoft .NET C# WPF application. It follows the normal MVVM patterns associated with a WPF application. This document does not detail the code in the application but how to change the look of the application generated from the code. The application targets .NET Framework 4.6.2 and you may need to install the targeting pack for that or alternatively change the target to .NET Framework 4.7.2. To install .NET framework 4.6.2 either use Visual Studio Installer or download it directly from Microsoft website: https://www.microsoft.com/en-us/download/details.aspx?id=53344 We use the WiX toolset for building installers. You will also need to download and install the WiX Toolset build tools and WiX Toolset Visual Studio Extensions that are compatible with your environment from this link: http://wixtoolset.org/releases/ . The Wix installation will require you to enable .NET 3.5 on your machine. If WiX does not automatically do this for you, perform the following instructions: Press “ Windows Logo ” + “ R ” keys on the keyboard. Type “ appwiz.cpl ” in the “ Run ” command box and press “ ENTER ” on the keyboard or click Run . In the “ Programs and Features ” window, click on the link “ Turn Windows features on or off ”. Check if the “ .NET Framework 3.5 (includes .NET 2.0 and 3.0) ” option is available in it. If yes, then enable it and then click on “ OK ”. Follow the on-screen instructions to complete the installation and restart the computer, if prompted. If you run into any errors, the following link will provide information from Microsoft on how to solve any potential issues. https://answers.microsoft.com/en-us/insider/forum/insider_wintp-insider_install/how-to-instal-net-framework-35-on-windows-10/450b3ba6-4d19-45ae-840e-78519f36d7a4?auth=1 Localization The application supports different languages. Currently, there're English, Spanish, Hindi and Russian language strings available in this repository. You can add your own translation to any other languages. To do that, create a new resource file with the next name Strings.xx.resx under ConsumerVPN->Properties, where xx is 2-letter ISO language name (ex. en , bg , de ). For better work with translations, we recommend you to install ResXManager from Visual Studio Extensions portal. For Visual Studio 2019, you can find the extension here: https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager . Adding new languages and translations is much more easier with the ResXManager extension. Navigating the project Solution Structure The application is divided in to the following solution structure. Folder / Namespace Explanation / Usage Behaviors WPF behavior utilities Controls Custom controls and visual states Enums Various application enumerables Extensions Custom utility class extensions Factories Factory classes that the app uses Helpers Utility classes for dealing with all kinds of data Input Multi Key Gesture classes for hotkeys support Interfaces All interfaces Resources All visual resources are stored here. You will most likely be working in here. There is a branding subfolder in this which contains all the files required to be modified to make the application visually yours. Utils Utility classes ValueConverters Data converters for UI elements ViewModels View models (for standard MVVM development) for all views in the application. Views All the views the application uses. Things to change when branding Application Settings In the ConsumerVPN application properties (found by right clicking on the project in the solution explorer and then going to settings on the left-hand side bar) you will find the following settings. CallSettingsUpgrade - If true , call ApplicationSettingsBase.Upgrade() method on startup. It updates application settings to reflect a more recent installation of the application. Default is true . More info here https://docs.microsoft.com/en-us/dotnet/api/system.configuration.applicationsettingsbase.upgrade Username - User's username. Default is String.Empty . Password - User's password. Default is String.Empty . ConnectionProtocol - VPN protocol. Default is VpnSDK.Enums.NetworkConnectionType.IKEv2 . OpenVpnProtocol - Network protocol that OpenVPN uses. Default is VpnSDK.Enums.NetworkProtocolType.UDP . KillSwitch - If true , KillSwitch feature is on. Default is true . SelectedCity - Place where user's selected city is stored. Default is String.Empty . SelectedCountry - Place where user's selected country is stored. Default is String.Empty . AutoReconnect - If true , the app tries to reconnect on VPN connection termination. Default is false . BlockLANTraffic - If true , the app blocks LAN traffic when KillSwitch is on. Default is false . Scramble - OpenVPN scramble/obfuscate option. If true , OpenVPN obfuscates its traffic. Default is false . CloseStyle - Defines what happens when user tries to close the app. Default is WLVPN.Enums.ApplicationCloseStyle.Dialog . Culture Application culture, 2-letter ISO language name. Default is String.Empty . HideOnStartup - If true , hide the app window on startup. BetaOptIn - If true , use Beta appcast URL, otherwise, use normal appcast URL. Default is false . StartupType - Defines if the app connects to Last/Best location on startup or not. Default is WLVPN.Enums.StartupType.NOP (No operation). ReconnectTries - The number of reconnect tries. Default is 5 . EnableSpeech - If true , enables Speech Engine. Default is false . EnableShortcuts - If true , enables application shortcuts. Default is true . CipherType - OpenVPN Cipher type. Default is VpnSDK.Enums.OpenVpnCipherType.AES_256_CBC . These are application settings with their default values. If you want different default values, this is the place where you can update them. Application name and namespace Under the Application section of the project properties, you will want to change the field Assembly Name to something along the lines of your application brand. For example, if you were called ExampleVPN , it would be suggested to call it ExampleVPN . As well as this, you should changed the Default Namespace to CompanyName.ApplicationName . Visual Studio will assist you in updating all the namespaces in the project files automatically, except namespaces in XAML files, that you will have to update manually. Visual Settings Each of the files in the Resources folder may be changed to have your visualization, especially files starting with Branding.* . Each file will be discussed in this section. Branding.System.xaml The Branding.System.xaml file is a WPF resource file that defines application settings. ApiKey and AuthenticationToken will need to be updated to match the data provided to you by WLVPN SDK to ensure you're able to authorize to the backend and use all functionality. <!-- Application Name --> <system:String x:Key=\"ApplicationName\">ConsumerVPN</system:String> <!-- WLVPN API Key. To obtain API Key you need to be a registered WLVPN reseller. If you have not done so already, please visit https://wlvpn.com/#contact to get started. --> <system:String x:Key=\"ApiKey\">YOURAPIKEY</system:String> <!-- WLVPN API Authentication token To obtain API Key you need to be a registered WLVPN reseller. If you have not done so already, please visit https://wlvpn.com/#contact to get started. --> <system:String x:Key=\"AuthenticationToken\">YOURAUTHTOKEN</system:String> <!-- NetSparkle Updater Appcast URLs for stable and beta channels. --> <system:String x:Key=\"AppcastUrl\">https://example.com/stable.xml</system:String> <system:String x:Key=\"BetaAppcastUrl\">https://example.com/beta.xml</system:String> Branding.General.xaml The Branding.General.xaml file is a WPF resource file that defines application images and URLs. <!-- Application Icon --> <ImageSource x:Key=\"ApplicationIcon\">Icons/AppIcon.ico</ImageSource> <!-- Company's website URL --> <system:Uri x:Key=\"WebsiteUrl\">https://example.com</system:Uri> <!-- Forgot password URL --> <system:Uri x:Key=\"ForgotPasswordUrl\">https://example.com</system:Uri> <!-- Sign Up URL --> <system:Uri x:Key=\"SignUpUrl\">https://example.com</system:Uri> <!-- System Tray Icons --> <ImageSource x:Key=\"DisconnectedIcon\">Icons/AppIcon.ico</ImageSource> <ImageSource x:Key=\"ConnectedIcon\">Icons/AppIconConnected.ico</ImageSource> <!-- Login Screen Logo --> <BitmapImage x:Key=\"LoginLogoImage\" UriSource=\"pack://application:,,,/Resources/Images/LoginViewLogo.png\" /> <!-- Login Screen Background --> <ImageSource x:Key=\"LoginBackgroundImage\">Images/LoginBackground.png</ImageSource> <!-- Connected Screen Background Image --> <BitmapImage x:Key=\"ConnectedBackgroundImage\" UriSource=\"pack://application:,,,/Resources/Images/DottedMap.png\" /> Branding.Colors.xaml The Branding.xaml file is a WPF resource file that defines brushes and colors used in various places within the application. Resources are defined in this file using the normal WPF Resource definition forms. If you wish to change a color or a brush, this is the file where you do it. The keys and values defined in the file are shown below and are generally self-explanatory. Refer to the key names to get a better understanding of what the value represents. <!-- Generic colors and brushes --> <Color x:Key=\"AccentColor\">#FF4A90E2</Color> <SolidColorBrush x:Key=\"AccentBrush\" Color=\"{StaticResource AccentColor}\" /> <Color x:Key=\"AccentColor1\">#3483de</Color> <SolidColorBrush x:Key=\"AccentBrush1\" Color=\"{StaticResource AccentColor1}\" /> <Color x:Key=\"AccentColor2\">#2275d7</Color> <SolidColorBrush x:Key=\"AccentBrush2\" Color=\"{StaticResource AccentColor2}\" /> <Color x:Key=\"AccentColor3\">#30363E</Color> <SolidColorBrush x:Key=\"AccentBrush3\" Color=\"{StaticResource AccentColor3}\" /> <Color x:Key=\"AccentColor4\">#1b5dab</Color> <SolidColorBrush x:Key=\"AccentBrush4\" Color=\"{StaticResource AccentColor4}\" /> <Color x:Key=\"IdealForegroundColor\">#FFFFFFFF</Color> <SolidColorBrush x:Key=\"IdealForegroundBrush\" Color=\"{StaticResource IdealForegroundColor}\" /> <Color x:Key=\"IdealForegroundDisabledColor\">#8b8b8b</Color> <SolidColorBrush x:Key=\"IdealForegroundDisabledBrush\" Color=\"{StaticResource IdealForegroundDisabledColor}\" /> <Color x:Key=\"IdealBackgroundDisabledColor\">#333333</Color> <SolidColorBrush x:Key=\"IdealBackgroundDisabledBrush\" Color=\"{StaticResource IdealBackgroundDisabledColor}\" /> <!-- Specific colors and brushes --> <!-- Window Background --> <Color x:Key=\"WindowBackgroundColor\">#0f0f15</Color> <SolidColorBrush x:Key=\"WindowBackgroundBrush\" Color=\"{StaticResource WindowBackgroundColor}\" /> <!-- Window Title --> <Color x:Key=\"WindowTitleColor\">#22000000</Color> <SolidColorBrush x:Key=\"WindowTitleBrush\" Color=\"{StaticResource WindowTitleColor}\" /> <SolidColorBrush x:Key=\"WindowSecondTitleBrush\" Opacity=\"0.4\" Color=\"{StaticResource IdealForegroundColor}\" /> <!-- Dialog Window --> <Color x:Key=\"DialogOverlayColor\">#DD000000</Color> <SolidColorBrush x:Key=\"DialogOverlayBrush\" Color=\"{StaticResource DialogOverlayColor}\" /> <Color x:Key=\"DialogBackgroundColor\">#0f0f15</Color> <SolidColorBrush x:Key=\"DialogBackgroundBrush\" Color=\"{StaticResource DialogBackgroundColor}\" /> <SolidColorBrush x:Key=\"DialogBorderBrush\" Color=\"{StaticResource AccentColor2}\" /> <!-- Information and Settings Tab controls --> <Color x:Key=\"TabHeaderBackgroundColor\">#232327</Color> <SolidColorBrush x:Key=\"TabHeaderBackgroundBrush\" Color=\"{StaticResource TabHeaderBackgroundColor}\" /> <Color x:Key=\"TabContentBackgroundColor\">#232327</Color> <SolidColorBrush x:Key=\"TabContentBackgroundBrush\" Color=\"{StaticResource TabContentBackgroundColor}\" /> <!-- Main Tab Control background --> <Color x:Key=\"ContentBackgroundColor\">#161618</Color> <SolidColorBrush x:Key=\"ContentBackgroundBrush\" Color=\"{StaticResource ContentBackgroundColor}\" /> <!-- Progress Wheel --> <SolidColorBrush x:Key=\"SpinnerBrush\" Color=\"{StaticResource AccentColor1}\" /> <!-- Disconnect Button --> <Color x:Key=\"DisconnectButtonColor\">#FFD0021B</Color> <SolidColorBrush x:Key=\"DisconnectButtonBrush\" Color=\"{StaticResource DisconnectButtonColor}\" /> <!-- Search Bar --> <Color x:Key=\"SearchBarBackgroundColor\">#212228</Color> <SolidColorBrush x:Key=\"SearchBarBackgroundBrush\" Color=\"{StaticResource SearchBarBackgroundColor}\" /> <!-- ScrollBar --> <SolidColorBrush x:Key=\"ScrollBarUpDownBrush\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ScrollBarThumbBrush\" Color=\"#606060\" /> <SolidColorBrush x:Key=\"ScrollBarBackgroundBrush\" Color=\"#11FFFFFF\" /> <!-- ToggleSwitch control brushes --> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Background\" Color=\"#01FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Static.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Background\" Color=\"#01FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Border\" Color=\"{DynamicResource AccentColor2}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Background\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.MouseOver.On.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Background\" Color=\"#00FFFFFF\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Border\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.Glyph\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Background\" Color=\"#FFCCCCCC\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Border\" Color=\"#FFCCCCCC\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Disabled.On.Glyph\" Color=\"#FFA3A3A3\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Background\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Border\" Color=\"#FF999999\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Pressed.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Background\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Border\" Color=\"{DynamicResource AccentColor}\" /> <SolidColorBrush x:Key=\"ToggleSwitch.Checked.Glyph\" Color=\"{DynamicResource IdealForegroundColor}\" /> There are quite a lot of colors to change but don't get too scared. Nearly every color can be modified to your hearts content to ensure your application color scheme fits with the palette you wish to use for your brand. Image Assets Within the Resources/Icons/ and Resources/Images/ folders, you will find multiple images to replace to make the client look how you wish it to. Keep in mind, it is suggested to keep them the same size unless you intend on modifying the view XAML files to fit everything correctly. Image Description Image Filename An image of the countries on earth done in the style of a dot painting. This shows on the main screen, when a VPN connection is established. (520x263) DottedMap.png An image of the icon used for the system tray icon as well as the logo in the about screen. Ensure this is a multi-dimension (16x16 up to 256x256) .ico file. AppIcon.ico An image of the icon used for the system tray icon, it is visible when the app is connected. Ensure this is a multi-dimension (16x16 up to 256x256) .ico file. AppIconConnected.ico An image of the application splash screen. (300 x 300) SplashScreen.png An image of the logo used on the left side of the Login View. (234 x 49) LoginViewLogo.png An image of the Login View background. (379 x 600) LoginBackground.png A vector version of the icon used on Connected View. ConnectedCheckMark.xaml A vector version of the icon used for Diagnostics tab item. Diagnostics.xaml A vector version of the icon used for General Settings tab item. GeneralSettings.xaml A vector version of the icon used near IP info on Connected View. Globe.xaml A vector version of the icon used for Help tab item. Help.xaml A vector version of the icon used for Main view tab item. Home.xaml A vector version of the icon used for Information tab item. Info.xaml A vector version of the icon used for Licenses tab item. License.xaml A vector version of the icon used near Location info on Connected View. Location.xaml A vector version of the icon used on Login View for password field. Lock.xaml A vector version of the icon used for \"home site\" button that is available post-authentication on all views. Logo.xaml A vector version of the icon used for Logout button. Logout.xaml A vector version of the icon used for Search input. MagnifyingGlass.xaml A vector version of the icon used for Settings tab item. Settings.xaml A vector version of the icon used on Connected View. Shield.xaml A vector version of the icon used for Connection Settings tab item. Signal.xaml A vector version of the icon used for Best Available DataGrid item. Speedometer.xaml A vector version of the icon. Tos.xaml A vector version of the icon used on Login View for username field. User.xaml Resources/Images/Flags directory. The list of available flags. The filename represents 2-letter ISO country name. ad.png, us.png & etc. Library licenses The licenses.rtf file is a compilation of the licenses used for the 3rd party products used in this application. If you leave it as is, it should be fine. If you change the application logic and add any 3rd party libraries, you will need to update this file with the appropriate licenses. Building the Application and making it yours Getting the Code The code is kept in a git repository at https://github.com/wlvpn/ConsumerVPN-Windows/tree/v2 . Clone the repository using your git client of choice on to your local machine. The solution file in the repository is named ConsumerVPN.sln . Using an instance of Visual Studio 2019 running as an administrator , open the ConsumerVPN.sln file to begin. Configuring Visual Studio to use the WLVPN NuGet feed Your account manager will provide you the details required to add the private WLVPN NuGet feed to your instance of Visual Studio. Using the provided details, follow the instructions provided by Microsoft here on how to add an external NuGet repository, this will allow you to use the VpnSDK package as well as others that may be required depending on your requirements. (Note: Do not follow any instructions past the linked paragraph as they are for VSTS configurations.) Changing the Branding You can change all the colors and links used by the application by changing values in the Branding.Colors.xaml and Branding.General.xaml file. Start by changing one of the colors to something glaring and then looking at the application to better understand the relationship between the definitions and where they are used in the application. For instance, changing one of the default accent colors to Orange gives us the following. AccentColor to Orange <Color x:Key=\"AccentColor\">Orange</Color> Another example would be changing the WindowBackgroundColor key to Green. Content Control color to Green <Color x:Key=\"ContentBackgroundColor\">Green</Color> All of these resources can be found in {PROJECT_ROOT}\\src\\App\\Resources\\ . Just as you can easily change the colors or the images by modifying the files in the Branding folder, you can modify all the text strings in the Strings.XX.resx files, where XX is 2-letter ISO country code."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "API Documentation On the left-hand side you will find in-depth information on all the classes, objects and enums provided with VpnSDK. To get started, the SDKBuilder<ISDK> class and ISDK interface are used for most operations in the SDK. SDKBuilder provides the ability to construct an SDK instance and ISDK is how the instance is used."
  },
  "api/VpnSDK.AuthenticationException.html": {
    "href": "api/VpnSDK.AuthenticationException.html",
    "title": "Class AuthenticationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class AuthenticationException Exception AuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. Inheritance Object BaseSDKException HTTPException AuthenticationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class AuthenticationException : HTTPException Constructors AuthenticationException(String) Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException(string message) Parameters Type Name Description String message The message to pass to the calling code. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner the exception that we are passing up. Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.APIException.html": {
    "href": "api/VpnSDK.APIException.html",
    "title": "Class APIException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class APIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. Inheritance Object BaseSDKException HTTPException APIException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class APIException : HTTPException Constructors APIException(String) Initializes a new instance of the APIException class. Declaration public APIException(string message) Parameters Type Name Description String message The message to pass to the calling code APIException(String, Exception) Initializes a new instance of the APIException class. Declaration public APIException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.html": {
    "href": "api/VpnSDK.html",
    "title": "Namespace VpnSDK | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK Classes APIException Exception VpnSDKOAuthException. Fired when an authentication request fails due to API issues. AuthenticationException Exception AuthenticationException. Fired when an authentication request fails due to invalid credentials or Bad Request. BaseSDKException Class VpnSDKBaseException. Used as a base class for all SDK exceptions. ConnectionAlreadyEstablishedException Exception ConnectionAlreadyEstablishedException. Fires when a VPN connection request is called when a connection is already established. ConnectionException Exception ConnectionException. Fires when a VPN connection has failed. ConnectionTerminatedException Exception ConnectionTerminatedException. Fires when a VPN connection is terminated by an external source. CoreException EmptyAvailableVpnProtocolsException Exception EmptyAvailableVpnProtocolsException. Fires when SDK construction has detected that no VPN protocols are available on the machine due to OS configuration issues or misconfiguration of the SDK. FetchLocationsException Exception FetchLocationsException. Fires when location fetching has failed. HTTPException Exception HTTPException. Fired as a base exception for any HTTP/S issue such as server failures, reach-ability problems and API request rejections. InvalidConfigurationException Exception InvalidConfigurationException. Fires when SDK configuration is invalid due to missing parameters or an unconfigured VPN protocol is requested. NotAuthorizedException Exception NotAuthorizedException. Fired when API requests are fired before authenticating a user. NotElevatedException Exception NotElevatedException. Fires when the running process is not elevated. NullLocationException Exception NullLocationException. Fires when a null location is provided to an SDK method. OAuthException Exception OAuthException. Fired when SDK is unable to refresh the access token. OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. RasConnectionConfigurationBuilder Class RasConnectionConfigurationBuilder. Builder for a RAS-based IConnectionConfiguration object. ReconnectOnPowerEventException Exception ReconnectOnPowerEventException. Fires when failed to reconnect on power event. SDKBuilder<T> Class SDKBuilder. Used to build an instance of a ISDK . ServerListException Exception ServerListException. Fired when the app is unable to load servers. TapAdapterException Exception TapAdapterException. Fired when an OpenVPN TAP adapter is not installed or not working correctly. UnknownErrorException UnknownErrorException. Fires when an unknown related error occurs. UnsupportedProtocolException Exception UnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. VPNAuthenticationException Exception VPNAuthenticationException. Fired when an authentication request fails due to API issues. VpnException Exception VpnException. Fired when any VPN connection error occurs. WFPException Exception WFPException. Fired when any network filtering errors occur. Delegates SDKChangeEventHandler<T> Delegate SDKChangeEventHandler. Used when state has changed from previous to current. SDKEventHandler Delegate SDKEventHandler. SDKEventHandler<T> Delegate SDKEventHandler. SDKOperationEventHandler Delegate SDKOperationEventHandler. Represents the current state of an operation. SDKOperationEventHandler<T> Delegate SDKOperationEventHandler. Represents the current state of an operation."
  },
  "api/VpnSDK.WFPException.html": {
    "href": "api/VpnSDK.WFPException.html",
    "title": "Class WFPException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class WFPException Exception WFPException. Fired when any network filtering errors occur. Inheritance Object BaseSDKException WFPException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class WFPException : BaseSDKException Constructors WFPException(String) Initializes a new instance of the WFPException class. Declaration public WFPException(string message) Parameters Type Name Description String message The message to pass to the calling code WFPException(String, Exception) Initializes a new instance of the WFPException class. Declaration public WFPException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up"
  },
  "api/VpnSDK.VpnException.html": {
    "href": "api/VpnSDK.VpnException.html",
    "title": "Class VpnException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VpnException Exception VpnException. Fired when any VPN connection error occurs. Inheritance Object BaseSDKException VpnException ConnectionAlreadyEstablishedException ConnectionException ConnectionTerminatedException NullLocationException ReconnectOnPowerEventException TapAdapterException UnsupportedProtocolException VPNAuthenticationException Inherited Members BaseSDKException.Type Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class VpnException : BaseSDKException Constructors VpnException(String) Initializes a new instance of the VpnException class. Declaration public VpnException(string message) Parameters Type Name Description String message The message to pass to the calling code VpnException(String, Exception) Initializes a new instance of the VpnException class. Declaration public VpnException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up"
  },
  "api/VpnSDK.VPNAuthenticationException.html": {
    "href": "api/VpnSDK.VPNAuthenticationException.html",
    "title": "Class VPNAuthenticationException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class VPNAuthenticationException Exception VPNAuthenticationException. Fired when an authentication request fails due to API issues. Inheritance Object BaseSDKException VpnException VPNAuthenticationException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class VPNAuthenticationException : VpnException Constructors VPNAuthenticationException(String) Initializes a new instance of the VPNAuthenticationException class. Declaration public VPNAuthenticationException(string message) Parameters Type Name Description String message The message. VPNAuthenticationException(String, Exception) Initializes a new instance of the VPNAuthenticationException class. Declaration public VPNAuthenticationException(string message, Exception inner) Parameters Type Name Description String message The message. Exception inner The inner exception. Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.UnsupportedProtocolException.html": {
    "href": "api/VpnSDK.UnsupportedProtocolException.html",
    "title": "Class UnsupportedProtocolException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class UnsupportedProtocolException Exception UnsupportedProtocolException. Fired when a connection request is using an invalid or unconfigured protocol. Inheritance Object BaseSDKException VpnException UnsupportedProtocolException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class UnsupportedProtocolException : VpnException Constructors UnsupportedProtocolException(String) Initializes a new instance of the UnsupportedProtocolException class. Declaration public UnsupportedProtocolException(string message) Parameters Type Name Description String message The message to pass to the calling code UnsupportedProtocolException(String, Exception) Initializes a new instance of the UnsupportedProtocolException class. Declaration public UnsupportedProtocolException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException VpnException"
  },
  "api/VpnSDK.UnknownErrorException.html": {
    "href": "api/VpnSDK.UnknownErrorException.html",
    "title": "Class UnknownErrorException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class UnknownErrorException UnknownErrorException. Fires when an unknown related error occurs. Inheritance Object BaseSDKException UnknownErrorException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class UnknownErrorException : BaseSDKException Constructors UnknownErrorException(String) Declaration public UnknownErrorException(string message) Parameters Type Name Description String message UnknownErrorException(String, Exception) Declaration public UnknownErrorException(string message, Exception inner) Parameters Type Name Description String message Exception inner Properties Type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType Overrides BaseSDKException.Type"
  },
  "api/VpnSDK.ServerListException.html": {
    "href": "api/VpnSDK.ServerListException.html",
    "title": "Class ServerListException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class ServerListException Exception ServerListException. Fired when the app is unable to load servers. Inheritance Object BaseSDKException HTTPException ServerListException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class ServerListException : HTTPException Constructors ServerListException(String) Initializes a new instance of the ServerListException class. Declaration public ServerListException(string message) Parameters Type Name Description String message The message to pass to the calling code. ServerListException(String, Exception) Initializes a new instance of the ServerListException class. Declaration public ServerListException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code. Exception inner the exception that we are passing up. Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.SDKOperationEventHandler.html": {
    "href": "api/VpnSDK.SDKOperationEventHandler.html",
    "title": "Delegate SDKOperationEventHandler | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKOperationEventHandler Delegate SDKOperationEventHandler. Represents the current state of an operation. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKOperationEventHandler(ISDK sender, OperationStatus status); Parameters Type Name Description ISDK sender The SDK instance that has fired the event OperationStatus status The current operation status."
  },
  "api/VpnSDK.SDKOperationEventHandler-1.html": {
    "href": "api/VpnSDK.SDKOperationEventHandler-1.html",
    "title": "Delegate SDKOperationEventHandler<T> | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKOperationEventHandler<T> Delegate SDKOperationEventHandler. Represents the current state of an operation. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKOperationEventHandler<in T>(ISDK sender, OperationStatus status, T args); Parameters Type Name Description ISDK sender The SDK instance that has fired the event OperationStatus status The current operation status. T args The payload as a result of the operation. Type Parameters Name Description T The payload type."
  },
  "api/VpnSDK.SDKEventHandler.html": {
    "href": "api/VpnSDK.SDKEventHandler.html",
    "title": "Delegate SDKEventHandler | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Delegate SDKEventHandler Delegate SDKEventHandler. Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public delegate void SDKEventHandler(ISDK sender); Parameters Type Name Description ISDK sender The SDK instance that has fired the event."
  },
  "api/VpnSDK.OpenVpnConnectionConfigurationBuilder.html": {
    "href": "api/VpnSDK.OpenVpnConnectionConfigurationBuilder.html",
    "title": "Class OpenVpnConnectionConfigurationBuilder | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class OpenVpnConnectionConfigurationBuilder Class OpenVpnConnectionConfigurationBuilder. Builder for an OpenVPN IConnectionConfiguration object. Inheritance Object OpenVpnConnectionConfigurationBuilder Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class OpenVpnConnectionConfigurationBuilder Methods Build() Builds an based off this instance. Declaration public IConnectionConfiguration Build() Returns Type Description IConnectionConfiguration IConnectionConfiguration. SetCipher(OpenVpnCipherType) Sets the OpenVPN cipher. Declaration public OpenVpnConnectionConfigurationBuilder SetCipher(OpenVpnCipherType cipherType) Parameters Type Name Description OpenVpnCipherType cipherType Type of the cipher. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetNetworkProtocol(NetworkProtocolType) Sets the network protocol. Declaration public OpenVpnConnectionConfigurationBuilder SetNetworkProtocol(NetworkProtocolType protocol) Parameters Type Name Description NetworkProtocolType protocol The protocol. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetPort(UInt16) Sets remote port. Declaration public OpenVpnConnectionConfigurationBuilder SetPort(ushort port) Parameters Type Name Description UInt16 port The port. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder. SetScramble(Boolean) Sets whether to use XOR-based traffic scrambling or not. Declaration public OpenVpnConnectionConfigurationBuilder SetScramble(bool scramble) Parameters Type Name Description Boolean scramble if set to true traffic scrambling is enabled. Returns Type Description OpenVpnConnectionConfigurationBuilder OpenVpnConnectionConfigurationBuilder."
  },
  "api/VpnSDK.FetchLocationsException.html": {
    "href": "api/VpnSDK.FetchLocationsException.html",
    "title": "Class FetchLocationsException | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Class FetchLocationsException Exception FetchLocationsException. Fires when location fetching has failed. Inheritance Object BaseSDKException HTTPException FetchLocationsException Namespace : VpnSDK Assembly : cs.temp.dll.dll Syntax public class FetchLocationsException : HTTPException Constructors FetchLocationsException(String) Initializes a new instance of the FetchLocationsException class. Declaration public FetchLocationsException(string message) Parameters Type Name Description String message The message to pass to the calling code FetchLocationsException(String, Exception) Initializes a new instance of the FetchLocationsException class. Declaration public FetchLocationsException(string message, Exception inner) Parameters Type Name Description String message The message to pass to the calling code Exception inner the exception that we are passing up Properties Type Gets the error type Declaration public override ErrorType Type { get; } Property Value Type Description ErrorType The error type. Overrides BaseSDKException.Type See Also Exception BaseSDKException HTTPException"
  },
  "api/VpnSDK.Extensions.html": {
    "href": "api/VpnSDK.Extensions.html",
    "title": "Namespace VpnSDK.Extensions | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Namespace VpnSDK.Extensions Classes ExceptionExtensions ExceptionExtensions class. Provides extension methods to help gather exception info. LocationExtensions LocationExtensions class. Provides extension methods for locations. RegionLoadChecker Class RegionLoadChecker. Provides utilities for checking a locations load by averaging them all and providing a simple value."
  },
  "api/VpnSDK.Enums.OpenVpnLogLevel.html": {
    "href": "api/VpnSDK.Enums.OpenVpnLogLevel.html",
    "title": "Enum OpenVpnLogLevel | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum OpenVpnLogLevel Enum OpenVpnLogLevel. Refers to what level of logging OpenVPN should use. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum OpenVpnLogLevel Fields Name Description Fatal Fatal errors only. Info Standard information. Normal Normal logging level. PacketDebug Debug logging with per-packet info. Trace Extreme trace debugging, do not use this unless you know what you are doing. VerboseDebug Verbose debugging. This should be avoided."
  },
  "api/VpnSDK.Enums.NetworkConnectionType.html": {
    "href": "api/VpnSDK.Enums.NetworkConnectionType.html",
    "title": "Enum NetworkConnectionType | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum NetworkConnectionType Enum NetworkConnectionType. Defines types of connections that can be used for a VPN tunnel. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum NetworkConnectionType Fields Name Description IKEv2 Internet Key Exchange Version 2 (IPSec) L2TP Layer 2 Tunneling Protocol (IPSec) OpenVPN OpenVPN PPTP Point-to-Point Tunneling Protocol SSTP Secure Socket Tunneling Protocol WireGuard WireGuard®"
  },
  "api/VpnSDK.Enums.DriverInstallResult.html": {
    "href": "api/VpnSDK.Enums.DriverInstallResult.html",
    "title": "Enum DriverInstallResult | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum DriverInstallResult Enum DriverInstallResult. Describes the result of installing a device driver. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum DriverInstallResult Fields Name Description Failed The driver installation failed. RebootRequired The driver installed successfully but a reboot is required. Success The driver was installed successfully."
  },
  "api/VpnSDK.Enums.ConnectionStatus.html": {
    "href": "api/VpnSDK.Enums.ConnectionStatus.html",
    "title": "Enum ConnectionStatus | VpnSDK v2 - WLVPN .NET Framework SDK",
    "keywords": "Enum ConnectionStatus Enum ConnectionStatus. Describes the states of a VPN connection. Namespace : VpnSDK.Enums Assembly : cs.temp.dll.dll Syntax public enum ConnectionStatus Fields Name Description Connected Connected successfully. Connecting Connecting to the server. Disconnected Disconnected. Disconnecting Disconnecting."
  }
}